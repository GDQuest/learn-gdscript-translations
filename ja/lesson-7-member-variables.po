# Translations template for Learn GDScript From Zero.
# Copyright (C) 2022 GDQuest
# This file is distributed under the same license as the Learn GDScript From
# Zero project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Learn GDScript From Zero\n"
"Report-Msgid-Bugs-To: https://github.com/GDQuest/learn-gdscript\n"
"POT-Creation-Date: 2023-12-09 20:05+0100\n"
"PO-Revision-Date: 2024-03-31 12:09+0000\n"
"Last-Translator: cyochot <k97un9ri@gmail.com>\n"
"Language-Team: Japanese <https://hosted.weblate.org/projects/"
"learn-gdscript-from-zero/lesson-7-member-variables/ja/>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.5-dev\n"
"Generated-By: Babel 2.9.1\n"

#: course/lesson-7-member-variables/lesson.tres:14
msgid ""
"In this lesson, we take a first look at variables.\n"
"\n"
"In games, you need to keep track of many values that change over time:\n"
"\n"
"- The player's score.\n"
"- Every character or enemy's health.\n"
"- The last checkpoint.\n"
"\n"
"And so much more. You need to store, retrieve, and update those values.\n"
"\n"
"We call those values [i]variables[/i]. Variables are labels you use to keep "
"track of values that vary over time. Here's an example of a variable "
"tracking a character or monster's health."
msgstr ""
"このレッスンでは、まず変数を見てみましょう。\n"
"\n"
"ゲームでは、時間の経過とともに変化する多くの値を追跡する必要があります。\n"
"\n"
"- プレーヤーのスコア。\n"
"- すべてのキャラクターまたは敵の健康状態。\n"
"- 最後のチェックポイント。\n"
"\n"
"他にもたくさんあります。 これらの値を保存、取得、更新する必要があります。\n"
"\n"
"これらの値を [i]変数[/i] と呼びます。 "
"変数は、時間の経過とともに変化する値を追跡するために使用するラベルです。 "
"以下は、キャラクターまたはモンスターの健康状態を追跡する変数の例です。"

#: course/lesson-7-member-variables/lesson.tres:44
msgid ""
"The line above defines a new variable named [code]health[/code] and assigns "
"it a starting value of [code]100[/code] (that's what the equal sign does, "
"more on that below).\n"
"\n"
"Function parameters, which you saw in the previous lesson, are another "
"example of variables."
msgstr ""
"上の行は、[code]health[/code] という名前の新しい変数を定義し、それに開始値 "
"[code]100[/code] を割り当てます (これは等号の働きです。詳しくは後述します)。"
"\n"
"\n"
"前のレッスンで見た関数パラメーターも変数の例です。"

#: course/lesson-7-member-variables/lesson.tres:56
msgid ""
"In this lesson, we start using variables built into Godot. They're a "
"particular kind called [i]member variables[/i].\n"
"\n"
"Member variables are values attached to a game entity. They're useful "
"properties like the [code]position[/code], [code]rotation[/code], and "
"[code]scale[/code] of a character.\n"
"\n"
"In a previous lesson, we saw how we could use the [code]rotate()[/code] "
"function to rotate our character."
msgstr ""
"このレッスンでは、Godot に組み込まれた変数の使用を開始します。 "
"これらは、[i]メンバー変数[/i]と呼ばれる特別な種類です。\n"
"\n"
"メンバー変数は、ゲーム エンティティに関連付けられた値です。 これらは、"
"キャラクターの "
"[code]position[/code]、[code]rotation[/code]、[code]scale[/code] "
"などの便利なプロパティです。\n"
"\n"
"前回のレッスンでは、[code]rotate()[/code] "
"関数を使用してキャラクターを回転させる方法を説明しました。"

#: course/lesson-7-member-variables/lesson.tres:80
msgid ""
"This function increases or decreases the value of the entity's "
"[code]rotation[/code] member variable.\n"
"\n"
"Say we want to reset the rotation to [code]0[/code] and make the character "
"upright. Using the [code]rotate()[/code] function can prove difficult: you "
"need to know the character's exact current angle to cancel it out.\n"
"\n"
"It's much easier to use the member variable rather than the function.\n"
"\n"
"The following code assigns the value [code]0[/code] to the character's "
"rotation, resetting its angle and making it upright."
msgstr ""
"この関数は、エンティティの [code]rotation[/code] "
"メンバー変数の値を増減します。\n"
"\n"
"回転を [code]0[/code] にリセットして、キャラクターを直立させたいとします。 "
"[code]rotate()[/code] 関数の使用は難しい場合があります。角度を打ち消すには、"
"キャラクターの現在の角度を正確に知る必要があります。\n"
"\n"
"関数よりもメンバー変数を使用する方がはるかに簡単です。\n"
"\n"
"次のコードは、値 [code]0[/code] "
"をキャラクターの回転に割り当て、角度をリセットして直立させます。"

#: course/lesson-7-member-variables/lesson.tres:106
msgid ""
"Notice how we use the equal sign ([code]=[/code]) to change the value of a "
"variable."
msgstr "等号 ([code]=[/code]) を使用して変数の値を変更する方法に注目してください。"

#: course/lesson-7-member-variables/lesson.tres:114
msgid "What's a variable?"
msgstr "変数とは何ですか?"

#: course/lesson-7-member-variables/lesson.tres:117
msgid ""
"Variables are labels you use to access values that change over time.\n"
"\n"
"You can also use them to put a name on a value you want to reuse throughout "
"your code. It makes your code easier to read and to change."
msgstr ""
"変数は、時間の経過とともに変化する値にアクセスするために使用するラベルです。"
"\n"
"\n"
"これらを使用して、コード全体で再利用したい値に名前を付けることもできます。 "
"これにより、コードが読みやすく、変更しやすくなります。"

#: course/lesson-7-member-variables/lesson.tres:120
#: course/lesson-7-member-variables/lesson.tres:121
msgid "A label you use to keep track of a value that can change."
msgstr "変化する可能性のある値を追跡するために使用するラベル。"

#: course/lesson-7-member-variables/lesson.tres:120
msgid "A function that varies over time."
msgstr "時間の経過とともに変化する機能。"

#: course/lesson-7-member-variables/lesson.tres:120
msgid "A decimal number."
msgstr "10 進数。"

#: course/lesson-7-member-variables/lesson.tres:128
msgid "Accessing sub-variables with the dot"
msgstr "ドットを使用してサブ変数にアクセスする"

#: course/lesson-7-member-variables/lesson.tres:130
msgid ""
"In video games, you will see many member variables that have sub-values.\n"
"\n"
"For example, the [code]position[/code] we mentioned has two coordinates: "
"[code]x[/code] and [code]y[/code].\n"
"\n"
"It's the same for the [code]scale[/code]: it has [code]x[/code] and [code]y[/"
"code] sub-variables. They respectively control the horizontal and vertical "
"size of the game entity.\n"
"\n"
"To access those X and Y sub-components, you add a dot (\".\") after the "
"variable name.\n"
"\n"
"The code below places the entity at [code]200[/code] pixels on the x-axis "
"and [code]250[/code] pixels on the y-axis."
msgstr ""
"ビデオ ゲームでは、サブ値を持つメンバー変数が多数見られます。\n"
"\n"
"たとえば、前述の [code]position[/code] には、[code]x[/code] と [code]y[/code]"
" の 2 つの座標があります。\n"
"\n"
"[code]scale[/code] についても同様です。[code]x[/code] および [code]y[/code] "
"サブ変数があります。 これらはそれぞれ、ゲーム "
"エンティティの水平サイズと垂直サイズを制御します。\n"
"\n"
"これらの X および Y サブコンポーネントにアクセスするには、変数名の後にドット "
"(「.」) を追加します。\n"
"\n"
"以下のコードは、エンティティを X 軸の [code]200[/code] ピクセル、Y 軸の "
"[code]250[/code] ピクセルに配置します。"

#: course/lesson-7-member-variables/lesson.tres:158
msgid ""
"Notice how we use the equal sign (\"=\") to assign the numbers on the right "
"to the sub-variables on the left.\n"
"\n"
"Unlike in maths, in computer programming, the equal sign (\"=\") does not "
"mean \"is equal to.\"\n"
"\n"
"Instead, it means \"assign the result of the expression on the right to the "
"variable on the left\". We assign values so often in code that we prefer to "
"reserve the equal sign for that."
msgstr ""
"等号 「=」 "
"を使用して、右側の数値を左側のサブ変数に割り当てる方法に注目してください。\n"
"\n"
"数学とは異なり、コンピューター プログラミングでは、等号 「=」 "
"は「に等しい」という意味ではありません。\n"
"\n"
"代わりに、「右側の式の結果を左側の変数に代入する」ことを意味します。 コード内"
"で値を割り当てることが非常に多いため、そのために等号を予約しておきます。"

#: course/lesson-7-member-variables/lesson.tres:170
msgid "In games, the Y-axis is positive going down"
msgstr "ゲームでは、Y 軸は下に行くほど正"

#: course/lesson-7-member-variables/lesson.tres:172
msgid ""
"Note that in games, assuming your character's position starts at (0, 0), the "
"code above moves the entity [code]200[/code] pixels to the right and "
"[code]250[/code] pixels down.\n"
"\n"
"In math, the y-axis is generally positive going up by convention.\n"
"\n"
"The convention is the [i]opposite[/i] in video games and many computer "
"applications: the y-axis is positive going down."
msgstr ""
"ゲームでは、キャラクターの位置が (0, 0) から始まると仮定すると、"
"上記のコードはエンティティを [code]200[/code] ピクセル右に、[code]250[/code] "
"ピクセル下に移動します。\n"
"\n"
"数学では、慣例により、y 軸は一般に正の値になります。\n"
"\n"
"ビデオ ゲームや多くのコンピューター "
"アプリケーションでは、この規則は[i]逆[/i]です。y "
"軸は下に行くほど正になります。"

#: course/lesson-7-member-variables/lesson.tres:194
msgid "Why does the Y-axis point downwards?"
msgstr "Y軸が下を向いているのはなぜですか?"

#: course/lesson-7-member-variables/lesson.tres:196
msgid ""
"This may be confusing if you only saw the y-axis pointing up in math "
"classes. However, in math, axes go in any direction. They don't even have to "
"be perpendicular.\n"
"\n"
"On the computer, the position (0, 0) happens to correspond to the top-left "
"of your computer screen. It then makes sense for coordinates to be positive "
"when going towards the bottom-right corner.\n"
"\n"
"This leads to another question: why is position zero the top left of the "
"screen? This is due to computer and TV displays history: they would "
"calculate and display pixels starting from the top left corner and moving "
"towards the bottom right corner."
msgstr ""
"数学の授業で Y "
"軸が上を向いていることしか見たことがない場合は、混乱するかもしれません。 "
"ただし、数学では軸は任意の方向に進みます。 垂直である必要さえありません。\n"
"\n"
"コンピューターでは、位置 (0, 0) はコンピューター画面の左上に対応します。 "
"したがって、右下隅に向かうときに座標が正になるのは理にかなっています。\n"
"\n"
"これにより、別の疑問が生じます。なぜ位置 0 が画面の左上なのか? これは、コンピ"
"ュータとテレビのディスプレイの歴史によるものです。コンピュータやテレビでは、"
"左上隅から右下隅に向かってピクセルが計算されて表示されます。"

#: course/lesson-7-member-variables/lesson.tres:210
msgid ""
"Let's look at one last example before moving on to the practice. The "
"following code makes the character 1.5 times its starting size."
msgstr "実践に移る前に、最後の例を見てみましょう。 次のコードは、"
"文字を開始時のサイズの 1.5 倍にします。"

#: course/lesson-7-member-variables/lesson.tres:228
msgid "How do you access sub-variables?"
msgstr "サブ変数にはどのようにアクセスしますか?"

#: course/lesson-7-member-variables/lesson.tres:229
msgid ""
"Variables often hold sub-values, like the [code]position[/code] has two sub-"
"variables: [code]x[/code] and [code]y[/code]. How would you access the "
"[code]x[/code], for example?"
msgstr ""
"変数は、 [code]position[/code] が [code]x[/code] と [code]y[/code] の 2 つの"
"サブ変数を持つように、サブ値を保持することがよくあります。たとえば、[code]x[/"
"code]にどのようにアクセスしますか?"

#: course/lesson-7-member-variables/lesson.tres:231
msgid ""
"To access a sub-variable, you need to write a dot between the parent "
"variable name and the sub-variable name.\n"
"\n"
"For example, to access the [code]x[/code] sub-variable of the "
"[code]position[/code] variable, you'll write [code]position.x[/code]."
msgstr ""
"サブ変数にアクセスするには、親変数名とサブ変数名の間にドットを書き込む必要が"
"あります。\n"
"\n"
"たとえば、[code]position[/code] 変数の [code]x[/code] "
"サブ変数にアクセスするには、[code]position.x[/code] と記述します。"

#: course/lesson-7-member-variables/lesson.tres:234
#: course/lesson-7-member-variables/lesson.tres:235
msgid "You write a dot (\".\") between the variable and the sub-variable name."
msgstr "変数とサブ変数名の間にドット (\".\") を書き込みます。"

#: course/lesson-7-member-variables/lesson.tres:234
msgid ""
"You write an arrow (\"->\") between the variable and the sub-variable name."
msgstr "変数とサブ変数名の間に矢印 (\"->\") を書き込みます。"

#: course/lesson-7-member-variables/lesson.tres:234
msgid ""
"You write a slash (\"/\") between the variable and the sub-variable name."
msgstr "変数とサブ変数名の間にスラッシュ (\"/\") を書き込みます。"

#: course/lesson-7-member-variables/lesson.tres:244
msgid ""
"In a future lesson, we'll explain why and how those variables have sub-"
"variables.\n"
"\n"
"For now, just know you can use the dot to access them.\n"
"\n"
"We'll tell you which variables have sub-components and what their names "
"are.\n"
"\n"
"In the next lessons, you'll create your own variables and do operations on "
"them to add or remove [code]score[/code], [code]health[/code], you name it.\n"
"\n"
"For now, let's practice accessing variables."
msgstr ""
"今後のレッスンでは、これらの変数にサブ変数がある理由と方法について説明します"
"。\n"
"\n"
"今のところ、ドットを使用してそれらにアクセスできることを知っておいてください"
"。\n"
"\n"
"どの変数にサブコンポーネントがあり、その名前が何であるかを説明します。\n"
"\n"
"次のレッスンでは、独自の変数を作成し、それらに対して操作を実行して、[code]sco"
"re[/code]、[code]health[/code]などを追加または削除します。\n"
"\n"
"とりあえず、変数へのアクセスを練習しましょう。"

#: course/lesson-7-member-variables/lesson.tres:260
msgid "Draw a rectangle at a precise position"
msgstr "正確な位置に矩形を描画する"

#: course/lesson-7-member-variables/lesson.tres:261
msgid ""
"Draw a rectangle of 200 by 120 pixels at the X position of 120 pixels and Y "
"position of 100 pixels.\n"
"\n"
"You need to replace the numbers in the code editor to draw the correct "
"rectangle."
msgstr ""
"X 位置 120 ピクセル、Y 位置 100 ピクセルに 200 x 120 "
"ピクセルの四角形を描画します。\n"
"\n"
"正しい四角形を描画するには、コード "
"エディターで数値を置き換える必要があります。"

#: course/lesson-7-member-variables/lesson.tres:275
msgid ""
"Use the position member variable and its sub-variables to change the "
"rectangle's position."
msgstr "position メンバー変数とそのサブ変数を使用して、四角形の位置を変更します。"

#: course/lesson-7-member-variables/lesson.tres:280
msgid "Draw squares at different positions"
msgstr "さまざまな位置に正方形を描画する"

#: course/lesson-7-member-variables/lesson.tres:281
msgid ""
"Draw three squares of size 100 by 100 that are 100 pixels apart on the "
"horizontal axis. In other words, there should be a 100-pixel gap between two "
"squares.\n"
"\n"
"You should draw the squares starting at the position (100, 100). This means "
"you should position the first square at 100 on the X axis and 100 on the Y "
"axis.\n"
"\n"
"Remember you need to use the equal sign ([code]=[/code]) to change the value "
"of a variable, like the turtle's position.\n"
"\n"
"Write your code inside the [code]run()[/code] function so the computer can "
"recognize it.\n"
"\n"
"Use the provided [code]draw_rectangle()[/code] function to draw each square."
msgstr ""
"水平軸上に 100 ピクセル間隔でサイズが 100 x 100 の正方形を 3 "
"つ描画します。つまり、2 つの正方形の間に 100 ピクセルのギャップが必要です。\n"
"\n"
"位置 (100, 100) から正方形を描画する必要があります。つまり、最初の正方形を X "
"軸に 100、Y 軸に 100 を配置する必要があります。\n"
"\n"
"カメの位置など、変数の値を変更するには等号([code]=[/code])を使用する必要があ"
"ることを忘れないでください。\n"
"\n"
"[code]run()[/code]関数内にコードを記述して、コンピューターが認識できるように"
"します。\n"
"\n"
"提供されている[code]draw_rectangle()[/code]関数を使用して、各正方形を描画しま"
"す。"

#: course/lesson-7-member-variables/lesson.tres:299
msgid ""
"Now you can place and draw one shape, but how about drawing several? In this "
"practice, you'll place three squares side by side to really get the hang of "
"properties."
msgstr ""
"これで 1 つの図形を配置して描画できますが、複数描画するのはどうでしょうか。こ"
"の演習では、3 つの正方形を並べて配置し、プロパティのコツをつかみます。"

#: course/lesson-7-member-variables/lesson.tres:303
msgid "Introduction to Member Variables"
msgstr "メンバー変数の概要"
