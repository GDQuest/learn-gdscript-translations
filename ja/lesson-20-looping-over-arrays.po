# Translations template for Learn GDScript From Zero.
# Copyright (C) 2022 GDQuest
# This file is distributed under the same license as the Learn GDScript From
# Zero project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Learn GDScript From Zero\n"
"Report-Msgid-Bugs-To: https://github.com/GDQuest/learn-gdscript\n"
"POT-Creation-Date: 2022-03-26 17:50+0100\n"
"PO-Revision-Date: 2024-03-31 02:31+0000\n"
"Last-Translator: cyochot <k97un9ri@gmail.com>\n"
"Language-Team: Japanese <https://hosted.weblate.org/projects/"
"learn-gdscript-from-zero/lesson-20-looping-over-arrays/ja/>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.5-dev\n"
"Generated-By: Babel 2.9.1\n"

#: course/lesson-20-looping-over-arrays/lesson.tres:14
msgid ""
"We used the [code]range()[/code] function in combination with "
"[code]for[/code] loops."
msgstr "[code]range()[/code] 関数を [code]for[/code] "
"ループと組み合わせて使用しました。"

#: course/lesson-20-looping-over-arrays/lesson.tres:34
msgid ""
"The [code]range()[/code] function produced an array that the "
"[code]for[/code] keyword could loop over.\n"
"\n"
"We can give [code]for[/code] loops [i]any[/i] array, and they will loop "
"over them just the same.\n"
"\n"
"Instead of using the [code]range()[/code] function, we could manually "
"write the numbers and get the same result."
msgstr ""
"[code]range()[/code] 関数は、[code]for[/code] "
"キーワードがループできる配列を生成しました。\n"
"\n"
"[code]for[/code]ループに[i]任意[/i]の配列を与えることができ、それらはそれらを"
"同じようにループします。\n"
"\n"
"[code]range()[/code]関数を使用する代わりに、手動で数値を書き込んで同じ結果を"
"得ることができます。"

#: course/lesson-20-looping-over-arrays/lesson.tres:58
msgid ""
"For each element inside the array, the [code]for[/code] loop extracts it,"
" stores it in the temporary variable named [code]number[/code], and "
"executes the loop's code once.\n"
"\n"
"Inside the loop, you can access the [code]number[/code] variable, which "
"changes on each [i]iteration[/i].\n"
"\n"
"The code works regardless of the array or where you store it. Often, you "
"will store arrays in variables for easy access."
msgstr ""
"配列内の各要素について、[code]for[/code]ループはそれを抽出し、[code]number[/c"
"ode]という名前の一時変数に格納し、ループのコードを一度実行します。\n"
"\n"
"ループ内では、[i]反復[/i]ごとに変化する [code]number[/code] "
"変数にアクセスできます。\n"
"\n"
"コードは、配列や格納場所に関係なく機能します。多くの場合、簡単にアクセスでき"
"るように配列を変数に格納します。"

#: course/lesson-20-looping-over-arrays/lesson.tres:80
msgid "What will this code print?"
msgstr "このコードは何を表示しますか?"

#: course/lesson-20-looping-over-arrays/lesson.tres:81
msgid ""
"[code]var numbers = [0, 1, 2]\n"
"for number in numbers:\n"
"    print(number)\n"
"[/code]"
msgstr ""
"[code]var numbers = [0, 1, 2]\n"
"for number in numbers:\n"
"    print(number)\n"
"[/code]"

#: course/lesson-20-looping-over-arrays/lesson.tres:86
msgid ""
"Compared to previous examples, we store the array in the "
"[code]numbers[/code] variable. Using the [code]numbers[/code] variable in"
" our [code]for[/code] loop allows the computer to access the array of "
"numbers like before.\n"
"\n"
"We have three numbers in the array: [code]0[/code], [code]1[/code], and "
"[code]2[/code].\n"
"\n"
"The loop extracts each of them sequentially and assigns it to the "
"[code]number[/code] temporary variable. As the loop processes each "
"number, the output will print [code]0[/code], then [code]1[/code], then "
"[code]2[/code], each on a separate line."
msgstr ""
"前の例と比較すると、配列を [code]numbers[/code] 変数に格納します。[code]for[/"
"code]ループで[code]numbers[/code]変数を使用すると、コンピューターは以前と同じ"
"ように数値の配列にアクセスできます。\n"
"\n"
"配列には、[code]0[/code]、[code]1[/code]、および [code]2[/code] の 3 "
"つの数値があります。\n"
"\n"
"ループは、それぞれを順番に抽出し、[code]number[/code]一時変数に代入します。ル"
"ープが各数値を処理すると、出力は [code]0[/code]、次に [code]1[/code]、次に "
"[code]2[/code] をそれぞれ別々の行に出力します。"

#: course/lesson-20-looping-over-arrays/lesson.tres:91
#: course/lesson-20-looping-over-arrays/lesson.tres:92
msgid "0, 1, and 2"
msgstr "0、1、および 2"

#: course/lesson-20-looping-over-arrays/lesson.tres:91
msgid "1, 2, and 3"
msgstr "0、1、および 2"

#: course/lesson-20-looping-over-arrays/lesson.tres:91
msgid "0, 0, and 0"
msgstr "0、0、および 0"

#: course/lesson-20-looping-over-arrays/lesson.tres:99
msgid "Making the turtle walk, with a loop"
msgstr "カメを歩かせる、ループで"

#: course/lesson-20-looping-over-arrays/lesson.tres:101
msgid ""
"In the previous lesson, you made a turtle walk along a path by writing "
"[code]Vector2[/code] coordinates in an array."
msgstr "前のレッスンでは、配列に [code]Vector2[/code] "
"座標を記述して、カメがパスに沿って歩くようにしました。"

#: course/lesson-20-looping-over-arrays/lesson.tres:121
msgid ""
"It's a [code]for[/code] loop that makes the turtle walk along the path.\n"
"\n"
"The loop works like this: for each coordinate in the array, it moves the "
"turtle once to that cell."
msgstr ""
"これは、カメをパスに沿って歩かせる [code]for[/code] ループです。\n"
"\n"
"ループは次のように機能します。配列内の座標ごとに、カメをそのセルに一度移動し"
"ます。"

#: course/lesson-20-looping-over-arrays/lesson.tres:143
msgid "It's the same principle with unit selection."
msgstr "ユニット選択も同じ原理です。"

#: course/lesson-20-looping-over-arrays/lesson.tres:163
msgid ""
"For each coordinate in an array named [code]selected_units[/code], we "
"check if there is a unit in that cell. If so, we select it. \n"
"\n"
"In that case, we use an array, a loop, and a condition together."
msgstr ""
"[code]selected_units[/code] という名前の配列の各座標について、そのセルにユニ"
"ットがあるかどうかを確認します。もしそうなら、それを選択します。\n"
"\n"
"その場合は、配列、ループ、条件を一緒に使用します。"

#: course/lesson-20-looping-over-arrays/lesson.tres:185
msgid ""
"The code above uses several features you haven't learned yet:\n"
"\n"
"- In a condition, the [code]in[/code] keyword allows you to check if a "
"value exists [i]in[/i] an array.\n"
"- The array's [code]append()[/code] function appends a new value at the "
"end of the array.\n"
"\n"
"Notice the use of a period after the [code]selected_units[/code] "
"variable, to call the [code]append()[/code] function. It's because this "
"function exists only on arrays.\n"
"\n"
"When functions exist only on a specific value type, you write a dot after"
" the value to call the function on it.\n"
"\n"
"We'll revisit those two features again in the following lessons."
msgstr ""
"上記のコードでは、まだ学習していないいくつかの機能を使用しています。\n"
"\n"
"- 条件では、[code]in[/code]キーワードを使用すると、配列に[i]in[/i]の値が存在"
"するかどうかを確認できます。\n"
"- 配列の [code]append()[/code] 関数は、配列の末尾に新しい値を追加します。\n"
"\n"
"[code]append()[/code] 関数を呼び出すために、[code]selected_units[/code] 変数"
"の後にピリオドが使用されていることに注意してください。これは、この関数が配列"
"にのみ存在するためです。\n"
"\n"
"関数が特定の値型にのみ存在する場合は、値の後にドットを記述して、その値に対し"
"て関数を呼び出します。\n"
"\n"
"この 2 つの機能については、次のレッスンでもう一度説明します。"

#: course/lesson-20-looping-over-arrays/lesson.tres:204
msgid ""
"The beauty of loops is that they work regardless of the size of your "
"arrays. \n"
"\n"
"The code just works whether you have one or ten thousand units to select."
" It is all accomplished with only a couple lines of code.\n"
"\n"
"That's the power of computer programming.\n"
"\n"
"In the following practices, you will use arrays combined with "
"[code]for[/code] loops to achieve similar results."
msgstr ""
"ループの優れた点は、配列のサイズに関係なく機能することです。\n"
"\n"
"このコードは、選択するユニットが 1 つであろうと 1 "
"万個であろうと機能します。これらはすべて、わずか数行のコードで実現されます。"
"\n"
"\n"
"それがコンピュータプログラミングの力です。\n"
"\n"
"次の演習では、配列を [code]for[/code] "
"ループと組み合わせて使用し、同様の結果を実現します。"

#: course/lesson-20-looping-over-arrays/lesson.tres:218
msgid "Move the robot along the path"
msgstr "ロボットを経路に沿って移動させる"

#: course/lesson-20-looping-over-arrays/lesson.tres:219
msgid ""
"Our AI pathfinding algorithm provided a path for the robot to move to the"
" right edge of the grid. Your task is to use a [code]for[/code] loop to "
"make the robot move.\n"
"\n"
"To move the robot, call [i]its[/i] [code]move_to()[/code] function, like "
"so: [code]robot.move_to()[/code].\n"
"\n"
"The [code]move_to()[/code] function only exists on the robot, which is "
"why you need to access it this way."
msgstr ""
"AI経路探索アルゴリズムは、ロボットがグリッドの右端に移動するための経路を提供"
"しました。あなたの仕事は、[code]for[/code]ループを使用してロボットを動かすこ"
"とです。\n"
"\n"
"ロボットを動かすには、[code]robot.move_to()[/code] のように[i]その[/i] "
"[code]move_to()[/code] 関数を呼び出します。\n"
"\n"
"[code]move_to()[/code] "
"関数はロボットにのみ存在するため、この方法でアクセスする必要があります。"

#: course/lesson-20-looping-over-arrays/lesson.tres:235
msgid ""
"Our AI pathfinding algorithm is giving us a path to move the robot. Now, "
"you need to make the turtle move along the path."
msgstr "私たちのAI経路探索アルゴリズムは、ロボットを動かすための経路を与えてくれます"
"。次に、カメをパスに沿って移動させる必要があります。"

#: course/lesson-20-looping-over-arrays/lesson.tres:240
msgid "Back to the drawing board"
msgstr "白紙に戻す"

#: course/lesson-20-looping-over-arrays/lesson.tres:241
msgid ""
"We want to draw many rectangles, something surprisingly common in games.\n"
"\n"
"However, writing this code by hand can get tedious. Instead, you could "
"store the size of your shapes in arrays and use a loop to draw them all "
"in batches.\n"
"\n"
"That's what you'll do in this practice.\n"
"\n"
"Use a [code]for[/code] loop to draw every rectangle in the "
"[code]rectangle_sizes[/code] array with the [code]draw_rectangle()[/code]"
" function.\n"
"\n"
"The rectangles shouldn't overlap or cross each other. To avoid that, "
"you'll need to call the [code]jump()[/code] function."
msgstr ""
"矩形をたくさん描きたいのですが、これはゲームでは意外とよくあることです。\n"
"\n"
"ただし、このコードを手作業で記述するのは面倒な場合があります。代わりに、図形"
"のサイズを配列に格納し、ループを使用してすべての図形をバッチで描画できます。"
"\n"
"\n"
"それがこの演習で行うことです。\n"
"\n"
"[code]for[/code] ループを使用して、[code]draw_rectangle()[/code] 関数で "
"[code]rectangle_sizes[/code] 配列内のすべての長方形を描画します。\n"
"\n"
"四角形は互いに重なり合ったり交差したりしないでください。これを回避するには、["
"code]jump()[/code] 関数を呼び出す必要があります。"

#: course/lesson-20-looping-over-arrays/lesson.tres:261
msgid ""
"The drawing turtle makes its comeback. Fear not! Armed with loops, you'll"
" make it draw faster than ever before."
msgstr "絵を描くカメが復活します。恐れることはありません!ループで武装して、これまで以"
"上に速く描画します。"

#: course/lesson-20-looping-over-arrays/lesson.tres:265
msgid "Looping over arrays"
msgstr "配列のループ処理"
