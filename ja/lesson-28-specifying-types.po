# Translations template for Learn GDScript From Zero.
# Copyright (C) 2022 GDQuest
# This file is distributed under the same license as the Learn GDScript From
# Zero project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Learn GDScript From Zero\n"
"Report-Msgid-Bugs-To: https://github.com/GDQuest/learn-gdscript\n"
"POT-Creation-Date: 2023-05-16 09:25+0200\n"
"PO-Revision-Date: 2024-03-31 09:14+0000\n"
"Last-Translator: cyochot <k97un9ri@gmail.com>\n"
"Language-Team: Japanese <https://hosted.weblate.org/projects/"
"learn-gdscript-from-zero/lesson-28-specifying-types/ja/>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.5-dev\n"
"Generated-By: Babel 2.9.1\n"

#: course/lesson-28-specifying-types/lesson.tres:13
msgid ""
"By default, GDScript is what we call a dynamically-typed language. That "
"means that you can just write variables, assign them a value with a number, "
"and assign them another value with a different type.\n"
"\n"
"Unlike in some other languages, in GDScript, the following code is valid."
msgstr ""
"デフォルトでは、GDScriptは動的型付け言語と呼ばれるものです。つまり、変数を記"
"述し、数値で値を代入し、別の型で別の値を割り当てるだけで済みます。\n"
"\n"
"他の言語とは異なり、GDScriptでは次のコードが有効です。"

#: course/lesson-28-specifying-types/lesson.tres:35
msgid ""
"But this feature often causes problems down the line. Let's take one example."
msgstr "しかし、この機能はしばしば将来的に問題を引き起こします。1つの例を見てみましょ"
"う。"

#: course/lesson-28-specifying-types/lesson.tres:43
msgid "Cell size: decimal number, or 2D vector?"
msgstr "セル サイズ: 10 進数、または 2D ベクトル？"

#: course/lesson-28-specifying-types/lesson.tres:45
msgid ""
"Games use grids all the time, be it for grid-based gameplay or to make "
"algorithms faster.\n"
"\n"
"When working with grids, you need to convert grid coordinates into positions "
"in the game world all the time. To do so, you give each cell a size in "
"pixels.\n"
"\n"
"You'll likely pick one of two types for that: [code]float[/code] or "
"[code]Vector2[/code], because pixel positions on the screen use "
"[code]Vector2[/code] coordinates.\n"
"\n"
"Either of those two values would be fine:"
msgstr ""
"ゲームでは、グリッドベースのゲームプレイやアルゴリズムの高速化など、常にグリ"
"ッドが使用されています。\n"
"\n"
"グリッドを操作するときは、グリッド座標を常にゲームワールド内の位置に変換する"
"必要があります。これを行うには、各セルにピクセル単位のサイズを指定します。\n"
"\n"
"画面上のピクセル位置は [code]Vector2[/code] "
"座標を使用するため、[code]float[/code] または [code]Vector2[/code] の 2 "
"つのタイプのいずれかを選択する可能性があります。\n"
"\n"
"これら 2 つの値のいずれかで問題ありません。"

#: course/lesson-28-specifying-types/lesson.tres:71
msgid ""
"Using a [code]Vector2[/code] could simplify some calculations. For example, "
"when converting grid coordinates to game world coordinates."
msgstr ""
"[code]Vector2[/code]を使用すると、一部の計算が簡略化されます。たとえば、グリ"
"ッド座標をゲームのワールド座標に変換する場合などです。"

#: course/lesson-28-specifying-types/lesson.tres:91
msgid ""
"In this example, because both [code]cell[/code] and [code]cell_size[/code] "
"are [code]Vector2[/code] values, we can add them.\n"
"\n"
"However, if [code]cell_size[/code] is a [code]float[/code], we will get a "
"type error."
msgstr ""
"この例では、[code]cell[/code] と [code]cell_size[/code] はどちらも "
"[code]Vector2[/code] の値であるため、追加できます。\n"
"\n"
"ただし、[code]cell_size[/code] が [code]float[/code] "
"の場合、型エラーが発生します。"

#: course/lesson-28-specifying-types/lesson.tres:123
msgid ""
"Worse: due to dynamic typing, we won't get an error [i]right away[/i]. We "
"will only get the error when calling [code]grid_to_world(Vector2(1, 1))[/"
"code].\n"
"\n"
"And that's a big problem."
msgstr ""
"さらに悪いことに、動的型付けのため、エラーが[i]すぐには発生しません[/i]。[cod"
"e]grid_to_world(Vector2(1, "
"1))[/code]を呼び出したときにのみエラーが発生します。\n"
"\n"
"そして、それは大きな問題です。"

#: course/lesson-28-specifying-types/lesson.tres:135
msgid ""
"Because we're learning, we only have small code examples in this course. But "
"your games' code will get long and split into many files. When coding, you "
"often forget about the code you wrote several weeks ago.\n"
"\n"
"And with a lot of code, it could take [i]hours[/i] of play before players "
"trigger a type error in your code."
msgstr ""
"学習中なので、このコースには小さなコード例しかありません。しかし、ゲームのコ"
"ードは長くなり、多くのファイルに分割されます。コーディングをしていると、数週"
"間前に書いたコードを忘れてしまうことがよくあります。\n"
"\n"
"また、コードが多いと、プレイヤーがコードで型エラーをトリガーするまでに[i]何時"
"間[/i]もかかることがあります。"

#: course/lesson-28-specifying-types/lesson.tres:145
msgid "Using type hints"
msgstr "型ヒントの使用"

#: course/lesson-28-specifying-types/lesson.tres:147
msgid ""
"Fortunately, GDScript has optional [i]type hints[/i].\n"
"\n"
"Type hints let the computer know the value type you want for variables and "
"report errors before running the code.\n"
"\n"
"To specify the type a variable can accept, you can write a colon and a type "
"after the name when defining a new variable."
msgstr ""
"幸いなことに、GDScriptにはオプションの[i]型ヒント[/i]があります。\n"
"\n"
"型ヒントは、変数に必要な値の型をコンピューターに知らせ、コードを実行する前に"
"エラーを報告します。\n"
"\n"
"変数が受け入れることができる型を指定するには、新しい変数を定義するときに、名"
"前の後にコロンと型を記述します。"

#: course/lesson-28-specifying-types/lesson.tres:171
msgid ""
"You could tell the computer you want [code]cell_size[/code] only to accept "
"[code]Vector2[/code] values like so."
msgstr "[code]cell_size[/code]が[code]Vector2[/code]の値のみを受け入れるようにコンピ"
"ューターに指示できます。"

#: course/lesson-28-specifying-types/lesson.tres:191
msgid ""
"If you try to replace the [code]cell_size[/code] with a value of another "
"type later, the computer will not let you."
msgstr "後で [code]cell_size[/code] "
"を別の型の値に置き換えようとすると、コンピューターは許可しません。"

#: course/lesson-28-specifying-types/lesson.tres:219
msgid "Letting the computer figure it out"
msgstr "コンピュータに理解させる"

#: course/lesson-28-specifying-types/lesson.tres:221
msgid ""
"GDScript comes with a feature called [i]type inference[/i]. In many cases, "
"but not all, the computer can figure out the type of a variable for you.\n"
"\n"
"To do so, you write [code]:=[/code], without the type. The computer will set "
"the type using the value after the equal sign. We could make "
"[code]cell_size[/code] a variable of type [code]Vector2[/code] like so:"
msgstr ""
"GDScriptには、[i]型推論[/i]と呼ばれる機能が付属しています。すべてではありませ"
"んが、多くの場合、コンピューターは変数の型を把握できます。\n"
"\n"
"これを行うには、型を指定せずに [code]:=[/code] と記述します。コンピューターは"
"、等号の後の値を使用してタイプを設定します。次のように、[code]cell_size[/code"
"]を[code]Vector2 [/code]型の変数にすることができます。"

#: course/lesson-28-specifying-types/lesson.tres:243
msgid ""
"This takes little typing, yet you get the benefits of using type hints, like "
"the computer reporting errors better and faster."
msgstr "これには入力の手間がほとんどかかりませんが、コンピューターがエラーをより適切"
"かつ迅速に報告するなど、型ヒントを使用する利点があります。"

#: course/lesson-28-specifying-types/lesson.tres:251
msgid "Why bother to add hints?"
msgstr "なぜわざわざヒントを追加するのですか?"

#: course/lesson-28-specifying-types/lesson.tres:253
msgid ""
"When you give the language hints like that, it will [i]prevent[/i] major "
"type errors. When you work in Godot, you will see that the computer can "
"report issues as you write the code. It makes the benefit even greater.\n"
"\n"
"Type hints can also help improve the readability of your code. It can help "
"to put more information directly in the code. As we saw, types are essential "
"when coding, and when using type hints, the computer will add them to the "
"engine's built-in code documentation system.\n"
"\n"
"There's an incredible third benefit for you: by using type hints, you will "
"learn types much faster. It's excellent for learning.\n"
"\n"
"In the following practices, you will write the correct type hints to make "
"the code error-free."
msgstr ""
"そのように言語のヒントを与えると、大きな型エラーを[i]防ぐ[/i]ことができます。"
"Godotで作業すると、コードを記述するときにコンピューターが問題を報告できること"
"がわかります。これにより、メリットはさらに大きくなります。\n"
"\n"
"型ヒントは、コードの可読性を向上させるのにも役立ちます。より多くの情報をコー"
"ドに直接入れると便利です。これまで見てきたように、型はコーディング時に不可欠"
"であり、型ヒントを使用すると、コンピューターはエンジンの組み込みコード "
"ドキュメント システムに追加します。\n"
"\n"
"3 つ目の利点は、型ヒントを使うことで、型をより早く習得できることです。学習に"
"最適です。\n"
"\n"
"次の演習では、コードをエラーのないものにするために、正しい型ヒントを記述しま"
"す。"

#: course/lesson-28-specifying-types/lesson.tres:267
msgid "Add the correct type hints to variables"
msgstr "変数に正しい型ヒントを追加する"

#: course/lesson-28-specifying-types/lesson.tres:268
msgid ""
"Our variables get the correct values but not the right hints. Using your "
"type-fu, add the correct type names in the variable definitions.\n"
"\n"
"You need to write the type name between the colon and the equal sign.\n"
"\n"
"Note: You cannot use type inference in this practice. You need to write the "
"type name in full."
msgstr ""
"変数は正しい値を取得しますが、正しいヒントは取得しません。学習した型を使用し"
"て、変数定義に正しい型名を追加します。\n"
"\n"
"コロンと等号の間に型名を書く必要があります。\n"
"\n"
"注: "
"この演習では、型の推論を使用できません。型名を完全に記述する必要があります。"

#: course/lesson-28-specifying-types/lesson.tres:284
msgid ""
"Our variables have the wrong type hints, causing errors. Correct them to "
"make the code run."
msgstr "変数の型ヒントが間違っているため、エラーが発生します。これらを修正して、コー"
"ドを実行します。"

#: course/lesson-28-specifying-types/lesson.tres:289
msgid "Fix the values to match the type hints"
msgstr "型ヒントと一致するように値を修正します"

#: course/lesson-28-specifying-types/lesson.tres:290
msgid ""
"It is the other way around in this practice: the type hints are fine, but "
"the values are not.\n"
"\n"
"Your task is to fix the values after the equal sign, so they match the type "
"hint of each variable."
msgstr ""
"この方法では逆で、型ヒントは問題ありませんが、変数の値に問題があります。\n"
"\n"
"ここでの作業は、等号の後の値を固定して、各変数の型ヒントと一致するようにする"
"ことです。"

#: course/lesson-28-specifying-types/lesson.tres:304
msgid ""
"This time, it's the other way around: variables have the correct type hints "
"but the wrong values. Change the values to make the code run."
msgstr "今回はその逆で、変数の型ヒントは正しいが、値が間違っている。値を変更してコー"
"ドを実行します。"

#: course/lesson-28-specifying-types/lesson.tres:308
msgid "Specifying types with type hints"
msgstr "型ヒントによる型の指定"
