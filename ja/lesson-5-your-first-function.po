# Translations template for Learn GDScript From Zero.
# Copyright (C) 2022 GDQuest
# This file is distributed under the same license as the Learn GDScript From
# Zero project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Learn GDScript From Zero\n"
"Report-Msgid-Bugs-To: https://github.com/GDQuest/learn-gdscript\n"
"POT-Creation-Date: 2023-05-16 09:25+0200\n"
"PO-Revision-Date: 2024-04-03 17:02+0000\n"
"Last-Translator: cyochot <k97un9ri@gmail.com>\n"
"Language-Team: Japanese <https://hosted.weblate.org/projects/"
"learn-gdscript-from-zero/lesson-5-your-first-function/ja/>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.5-dev\n"
"Generated-By: Babel 2.9.1\n"

#: course/lesson-5-your-first-function/lesson.tres:14
msgid ""
"So far, we have called existing functions that other developers wrote.\n"
"\n"
"In this lesson, we'll talk more about what functions are and see some "
"examples. Then, you will learn how to define your own functions."
msgstr ""
"これまで、他の開発者が作成した既存の関数を呼び出してきました。\n"
"\n"
"このレッスンでは、関数とは何かについて詳しく説明し、いくつかの例を見ていきま"
"す。 次に、独自の関数を定義する方法を学びます。"

#: course/lesson-5-your-first-function/lesson.tres:24
msgid "Functions are named sequences of instructions"
msgstr "関数は命令のシーケンスに名前が付けられます"

#: course/lesson-5-your-first-function/lesson.tres:26
msgid ""
"Functions are [i]sequences of instructions[/i] we give a name. We call that "
"name an [i]identifier[/i].\n"
"\n"
"Using the identifier, we can get the computer to execute all the "
"instructions inside the function as many times as we need. This is what a "
"[i]function call[/i] does."
msgstr ""
"関数は、名前を付けた[i]命令のシーケンス[/i]です。 この名前を [i]識別子[/i] "
"と呼びます。\n"
"\n"
"識別子を使用すると、コンピューターに関数内のすべての命令を必要なだけ実行させ"
"ることができます。 これが [i]関数呼び出し[/i] の動作です。"

#: course/lesson-5-your-first-function/lesson.tres:36
msgid "Learn more about identifiers"
msgstr "識別子の詳細について"

#: course/lesson-5-your-first-function/lesson.tres:38
msgid ""
"In computer programming, we talk about [i]identifiers[/i] rather than "
"\"names\".\n"
"\n"
"It is because a function name is a label the computer uses to precisely "
"[i]identify[/i] and refer to a function or other code elements.\n"
"\n"
"Identifiers are unique: you cannot reuse the same name in a given [i]space[/"
"i] in your code.\n"
"\n"
"If you try to name two functions the same, the computer will raise an error."
msgstr ""
"コンピューター プログラミングでは、「名前」ではなく [i]識別子[/i] "
"について話します。\n"
"\n"
"関数名は、コンピュータが関数または他のコード要素を正確に[i]識別[/i]し、参照す"
"るために使用するラベルであるためです。\n"
"\n"
"識別子は一意です。コード内の特定の [i]スペース[/i] "
"で同じ名前を再利用することはできません。\n"
"\n"
"2 つの関数に同じ名前を付けようとすると、コンピュータはエラーを発生させます。"

#: course/lesson-5-your-first-function/lesson.tres:54
msgid ""
"If there is any code that you need to run multiple times, you can put it "
"inside a function and give it a name.\n"
"\n"
"The instructions inside a function can be any code you want, and they will "
"all run every time you call the function.\n"
"\n"
"Here's the example of a [code]move_and_rotate()[/code] function that moves "
"the turtle forward and then turns it 90°."
msgstr ""
"複数回実行する必要があるコードがある場合は、それを関数内に入れて名前を付ける"
"ことができます。\n"
"\n"
"関数内の命令は任意のコードにすることができ、関数を呼び出すたびにすべて実行さ"
"れます。\n"
"\n"
"これは、カメを前方に移動してから 90 度回転する [code]move_and_rotate()[/code]"
" 関数の例です。"

#: course/lesson-5-your-first-function/lesson.tres:78
msgid ""
"The [code]move_and_rotate()[/code] function consists of two instructions, "
"each on a separate line. Both of those instructions call another familiar "
"function.\n"
"\n"
"You could write another function that calls [code]move_and_rotate()[/code] "
"four times to draw a square of length 200 pixels."
msgstr ""
"[code]move_and_rotate()[/code] 関数は、それぞれ別の行にある 2 "
"つの命令で構成されます。 "
"これらの命令は両方とも、別のよく知られた関数を呼び出します。\n"
"\n"
"[code]move_and_rotate()[/code] を 4 回呼び出す別の関数を作成して、長さ 200 "
"ピクセルの正方形を描画することもできます。"

#: course/lesson-5-your-first-function/lesson.tres:100
msgid ""
"Every time we call [code]move_and_rotate()[/code], the two functions "
"[code]move_forward(200)[/code] and [code]turn_right(90)[/code] are called in "
"sequence.\n"
"\n"
"In this simple example, it may not feel super useful. Here's a more useful "
"and realistic one: a function to draw any square.\n"
"\n"
"The following function uses [i]parameters[/i], which we will explore in the "
"next lesson.\n"
"\n"
"[i]Drag the slider to change the square's size.[/i]"
msgstr ""
"[code]move_and_rotate()[/code] を呼び出すたびに、2 つの関数 "
"[code]move_forward(200)[/code] と [code]turn_right(90)[/code] "
"が順番に呼び出されます。\n"
"\n"
"この単純な例では、それほど便利だとは思えないかもしれません。 "
"これは、より便利で現実的な関数です。任意の正方形を描画する関数です。\n"
"\n"
"次の関数は [i]パラメータ[/i] "
"を使用します。これについては次のレッスンで説明します。\n"
"\n"
"[i]スライダーをドラッグして正方形のサイズを変更します。[/i]"

#: course/lesson-5-your-first-function/lesson.tres:124
msgid "How to define your own functions"
msgstr "独自の関数を定義する方法"

#: course/lesson-5-your-first-function/lesson.tres:126
msgid ""
"Let's break down how you define a function.\n"
"\n"
"A function definition starts with the [code]func[/code] keyword followed by "
"a space, the function's name, parentheses, and a colon."
msgstr ""
"関数を定義する方法を詳しく見てみましょう。\n"
"\n"
"関数定義は、[code]func[/code] "
"キーワードで始まり、その後にスペース、関数名、括弧、コロンが続きます。"

#: course/lesson-5-your-first-function/lesson.tres:148
msgid ""
"The instructions inside the function [b]must[/b] all start with a leading "
"tab character. You can insert that tab character by pressing the [b]Tab[/b] "
"key.\n"
"\n"
"We call those leading tabs [i]indents[/i]. They're important: the computer "
"uses them to know which instructions are part of the same code block."
msgstr ""
"関数内の命令はすべて先頭のタブ文字で始まる[b]必要[/b]があります。 [b]Tab[/b] "
"キーを押すと、そのタブ文字を挿入できます。\n"
"\n"
"これらの先頭のタブを [i]インデント[/i] と呼びます。 "
"これらは重要です。コンピューターは、どの命令が同じコード "
"ブロックの一部であるかを知るためにこれらを使用します。"

#: course/lesson-5-your-first-function/lesson.tres:158
msgid "Why do we use functions?"
msgstr "なぜ関数を使用するのでしょうか?"

#: course/lesson-5-your-first-function/lesson.tres:161
msgid ""
"Functions are groups of instructions we reuse every time we call the "
"function.\n"
"\n"
"Because we give functions a name, they also allow us to name a set of "
"instructions, which is handy!"
msgstr ""
"関数は、関数を呼び出すたびに再利用する命令のグループです。\n"
"\n"
"関数に名前を付けると、一連の命令にも名前を付けることができるので便利です！"

#: course/lesson-5-your-first-function/lesson.tres:164
#: course/lesson-5-your-first-function/lesson.tres:165
msgid "To reuse code multiple times. "
msgstr "コードを複数回再利用するため。 "

#: course/lesson-5-your-first-function/lesson.tres:164
#: course/lesson-5-your-first-function/lesson.tres:165
msgid "To run multiple instructions in one go."
msgstr "複数の命令を一度に実行します。"

#: course/lesson-5-your-first-function/lesson.tres:164
#: course/lesson-5-your-first-function/lesson.tres:165
msgid "To put a name on multiple lines of code."
msgstr "複数行のコードに名前を付ける。"

#: course/lesson-5-your-first-function/lesson.tres:172
msgid "Names in code have rules"
msgstr "コード内の名前にはルールがあります"

#: course/lesson-5-your-first-function/lesson.tres:174
msgid ""
"Function identifiers cannot contain spaces. In general, names in programming "
"languages cannot contain spaces.\n"
"\n"
"The computer uses spaces to detect the separation between different keywords "
"and identifiers.\n"
"\n"
"Instead of spaces, in GDScript, we use underscores (\"_\"). You saw this "
"already with functions like [code]move_forward()[/code] or "
"[code]move_local_x()[/code]. This is the convention we follow in GDScript.\n"
"\n"
"There's another convention programmers use in some other programming "
"languages.\n"
"\n"
"Instead of using underscores, they start words with capital letters except "
"for the first one. With that convention, you'd write function names like "
"[code]moveForward()[/code] or [code]moveLocalX()[/code]\n"
"\n"
"Identifiers also [i]have[/i] to start with a letter or an underscore; You "
"[i]can't[/i] begin with a number, but you can use numbers after the first "
"character."
msgstr ""
"関数識別子にはスペースを含めることはできません。 "
"一般に、プログラミング言語の名前にはスペースを含めることはできません。\n"
"\n"
"コンピューターはスペースを使用して、さまざまなキーワードと識別子の間の区切り"
"を検出します。\n"
"\n"
"GDScript では、スペースの代わりにアンダースコア (「_」) を使用します。 "
"これは、[code]move_forward()[/code] や [code]move_local_x()[/code] "
"などの関数ですでに確認済みです。 これは、GDScript で従う規則です。\n"
"\n"
"他のプログラミング言語では、プログラマが使用する別の規則があります。\n"
"\n"
"アンダースコアを使用する代わりに、最初の文字を除いて単語を大文字で始めます。 "
"この規則では、[code]moveForward()[/code] や [code]moveLocalX()[/code] "
"のような関数名を記述します。\n"
"\n"
"識別子は文字またはアンダースコアで始めることも[i]あります[/i]。 数字で始める"
"ことは[i]できません[/i]が、最初の文字の後に数字を使用することはできます。"

#: course/lesson-5-your-first-function/lesson.tres:192
msgid "Which of the following names are valid function names?"
msgstr "次の名前のうち、有効な関数名はどれですか?"

#: course/lesson-5-your-first-function/lesson.tres:193
msgid "Note that it's fine to use capital letters."
msgstr "大文字を使用しても問題ないことに注意してください。"

#: course/lesson-5-your-first-function/lesson.tres:195
msgid ""
"You can't name a function [code]move forward[/code] because it contains a "
"space. Names in code cannot contain spaces.\n"
"\n"
"They can't start with numbers either, which is why [code]45_degree_turn[/"
"code] is also invalid. \n"
"\n"
"However, having numbers elsewhere in a function name is fine. That's why "
"[code]make3NewCharacters[/code] works."
msgstr ""
"スペースが含まれているため、関数に [code]move forward[/code] "
"という名前を付けることはできません。 "
"コード内の名前にはスペースを含めることはできません。\n"
"\n"
"数字で始めることもできないため、[code]45_degree_turn[/code] も無効です。\n"
"\n"
"ただし、関数名の他の場所に数字を含めても問題ありません。 "
"これが、[code]make3NewCharacters[/code] が機能する理由です。"

#: course/lesson-5-your-first-function/lesson.tres:200
msgid "move forward"
msgstr "move forward"

#: course/lesson-5-your-first-function/lesson.tres:200
#: course/lesson-5-your-first-function/lesson.tres:201
msgid "jump"
msgstr "jump"

#: course/lesson-5-your-first-function/lesson.tres:200
#: course/lesson-5-your-first-function/lesson.tres:201
msgid "make3NewCharacters"
msgstr "make3NewCharacters"

#: course/lesson-5-your-first-function/lesson.tres:200
#: course/lesson-5-your-first-function/lesson.tres:201
msgid "move_forward"
msgstr "move_forward"

#: course/lesson-5-your-first-function/lesson.tres:200
msgid "45_degree_turn"
msgstr "45_degree_turn"

#: course/lesson-5-your-first-function/lesson.tres:208
msgid "Instantly moving the turtle to a different position"
msgstr "カメを別の位置に瞬時に移動する"

#: course/lesson-5-your-first-function/lesson.tres:210
msgid ""
"In order to draw multiple squares in different positions, we introduce a new "
"function for our turtle to use.\n"
"\n"
"The [code]jump()[/code] function picks up the turtle and places it relative "
"to where it is.\n"
"\n"
"So calling [code]jump(-100, 50)[/code] moves the turtle by 100 pixels to the "
"[b]left[/b] and 50 pixels [b]down[/b] without drawing any lines."
msgstr ""
"異なる位置に複数の正方形を描画するために、カメが使用する新しい関数を導入しま"
"す。\n"
"\n"
"[code]jump()[/code] "
"関数は、カメを選択し、カメがいる場所に相対的に配置します。\n"
"\n"
"したがって、[code]jump(-100, 50)[/code] を呼び出すと、線を描画せずにカメを "
"[b]左[/b]に 100 ピクセル、[b]下[/b]に 50 ピクセル移動します。"

#: course/lesson-5-your-first-function/lesson.tres:232
msgid "A function to draw squares"
msgstr "正方形を描く関数"

#: course/lesson-5-your-first-function/lesson.tres:233
msgid ""
"Code a function named [code]draw_square()[/code] to draw one square of "
"length 200 pixels. The function should take no parameters.\n"
"\n"
"Use the [code]move_forward()[/code] and [code]turn_right()[/code] functions "
"to instruct the turtle.\n"
"\n"
"In the following practice, you'll use the [code]draw_square()[/code] "
"function to draw multiple squares by calling your own function."
msgstr ""
"[code]draw_square()[/code] という名前の関数をコーディングして、長さ 200 "
"ピクセルの正方形を 1 つ描画します。 関数はパラメータを取らないでください。\n"
"\n"
"[code]move_forward()[/code] 関数と [code]turn_right()[/code] "
"関数を使用してカメに指示します。\n"
"\n"
"次の演習では、[code]draw_square()[/code] "
"関数を使用して、独自の関数を呼び出して複数の正方形を描画します。"

#: course/lesson-5-your-first-function/lesson.tres:246
msgid ""
"Until now, you've had to write code by hand, and it's boring. It's time to "
"code a reusable function. You'll use it to draw multiple squares."
msgstr "今まではコードを手書きする必要があり、退屈でした。 "
"再利用可能な関数をコーディングします。 "
"これを使用して複数の正方形を描画します。"

#: course/lesson-5-your-first-function/lesson.tres:251
msgid "Drawing multiple squares"
msgstr "複数の正方形を描く"

#: course/lesson-5-your-first-function/lesson.tres:252
msgid ""
"You have a function to draw one square: [code]draw_square()[/code]. Use it "
"to draw three squares.\n"
"\n"
"We already created [code]draw_square()[/code] for you. Create a function "
"named [code]draw_three_squares[/code] that calls [code]draw_square()[/code] "
"three times.\n"
"\n"
"If you just call the function, all three squares will overlap. To stack them "
"diagonally, call [code]jump(300, 300)[/code] between two calls to "
"[code]draw_square()[/code].\n"
"\n"
"Calling [code]jump(300, 300)[/code] makes the turtle jump by 300 pixels to "
"the right and 300 pixels down without drawing any lines."
msgstr ""
"1 つの正方形を描画する関数があります: [code]draw_square()[/code]。 "
"それを使用して 3 つの正方形を描きます。\n"
"\n"
"[code]draw_square()[/code] はすでに作成されています。 "
"[code]draw_square()[/code] を 3 回呼び出す [code]draw_three_squares[/code] "
"という名前の関数を作成します。\n"
"\n"
"関数を呼び出すだけだと、3 つの正方形がすべて重なり合います。 "
"それらを斜めに積み重ねるには、[code]draw_square()[/code] の 2 "
"つの呼び出しの間に [code]jump(300, 300)[/code] を呼び出します。\n"
"\n"
"[code]jump(300, 300)[/code] を呼び出すと、カメは線を描画せずに右に 300 "
"ピクセル、下に 300 ピクセルずつジャンプします。"

#: course/lesson-5-your-first-function/lesson.tres:275
msgid ""
"Now you created a function to draw squares, you can reuse it by calling it "
"multiple times."
msgstr "これで正方形を描画する関数が作成されました。これを複数回呼び出すことで再利用"
"できます。"

#: course/lesson-5-your-first-function/lesson.tres:279
msgid "Coding Your First Function"
msgstr "最初の関数をコーディングする"
