# Translations template for Learn GDScript From Zero.
# Copyright (C) 2022 GDQuest
# This file is distributed under the same license as the Learn GDScript From
# Zero project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Learn GDScript From Zero\n"
"Report-Msgid-Bugs-To: https://github.com/GDQuest/learn-gdscript\n"
"POT-Creation-Date: 2023-05-16 09:25+0200\n"
"PO-Revision-Date: 2022-05-08 14:10+0000\n"
"Last-Translator: 巽星石 <xun19900424@gmail.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"learn-gdscript-from-zero/lesson-28-specifying-types/zh_Hans/>\n"
"Language: zh_Hans\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.12.1\n"
"Generated-By: Babel 2.9.1\n"

#: course/lesson-28-specifying-types/lesson.tres:13
msgid ""
"By default, GDScript is what we call a dynamically-typed language. That "
"means that you can just write variables, assign them a value with a number, "
"and assign them another value with a different type.\n"
"\n"
"Unlike in some other languages, in GDScript, the following code is valid."
msgstr ""
"默认情况下，GDScript 就是我们所说的动态类型语言。 这意味着您可以只编写变量，"
"为它们分配一个带有数字的值，然后为它们分配另一个具有不同类型的值。\n"
"\n"
"与其他一些语言不同，在 GDScript 中，以下代码是有效的。"

#: course/lesson-28-specifying-types/lesson.tres:35
msgid ""
"But this feature often causes problems down the line. Let's take one example."
msgstr "但是此功能通常会导致问题。 让我们举一个例子。"

#: course/lesson-28-specifying-types/lesson.tres:43
msgid "Cell size: decimal number, or 2D vector?"
msgstr "格子大小：十进制数还是二维向量？"

#: course/lesson-28-specifying-types/lesson.tres:45
#, fuzzy
msgid ""
"Games use grids all the time, be it for grid-based gameplay or to make "
"algorithms faster.\n"
"\n"
"When working with grids, you need to convert grid coordinates into positions "
"in the game world all the time. To do so, you give each cell a size in "
"pixels.\n"
"\n"
"You'll likely pick one of two types for that: [code]float[/code] or "
"[code]Vector2[/code], because pixel positions on the screen use "
"[code]Vector2[/code] coordinates.\n"
"\n"
"Either of those two values would be fine:"
msgstr ""
"游戏一直都在使用网格，无论是基于网格的游戏玩法还是让算法更快。\n"
"\n"
"使用网格时，您需要始终将网格坐标转换为游戏世界中的位置。 为此，您需要为每个单"
"元格指定一个像素大小。\n"
"\n"
"您可能会为此选择以下两种类型之一：[code]float[/code] 或 [code]Vector2[/"
"code]。\n"
"\n"
"这两个值中的任何一个都可以："

#: course/lesson-28-specifying-types/lesson.tres:71
msgid ""
"Using a [code]Vector2[/code] could simplify some calculations. For example, "
"when converting grid coordinates to game world coordinates."
msgstr ""
"使用 [code]Vector2[/code] 可以简化一些计算。 例如，将网格坐标转换为游戏世界坐"
"标时。"

#: course/lesson-28-specifying-types/lesson.tres:91
msgid ""
"In this example, because both [code]cell[/code] and [code]cell_size[/code] "
"are [code]Vector2[/code] values, we can add them.\n"
"\n"
"However, if [code]cell_size[/code] is a [code]float[/code], we will get a "
"type error."
msgstr ""
"在这个例子中，因为 [code]cell[/code] 和 [code]cell_size[/code] 都是 "
"[code]Vector2[/code] 值，我们可以添加它们。\n"
"\n"
"但是，如果 [code]cell_size[/code] 是 [code]float[/code]，我们将收到类型错误。"

#: course/lesson-28-specifying-types/lesson.tres:123
msgid ""
"Worse: due to dynamic typing, we won't get an error [i]right away[/i]. We "
"will only get the error when calling [code]grid_to_world(Vector2(1, 1))[/"
"code].\n"
"\n"
"And that's a big problem."
msgstr ""
"更糟糕的是：由于动态类型，我们不会立即得到错误 [i][/i]。 我们只会在调用 "
"[code]grid_to_world(Vector2(1, 1))[/code] 时得到错误。\n"
"\n"
"这是一个大问题。"

#: course/lesson-28-specifying-types/lesson.tres:135
msgid ""
"Because we're learning, we only have small code examples in this course. But "
"your games' code will get long and split into many files. When coding, you "
"often forget about the code you wrote several weeks ago.\n"
"\n"
"And with a lot of code, it could take [i]hours[/i] of play before players "
"trigger a type error in your code."
msgstr ""
"因为我们正在学习，所以我们在本课程中只有小代码示例。 但是您的游戏代码会变长并"
"分成许多文件。 编码时，您经常会忘记几周前编写的代码。\n"
"\n"
"并且使用大量代码，玩家可能需要 [i] 小时 [/i] 的播放时间才能触发代码中的类型错"
"误。"

#: course/lesson-28-specifying-types/lesson.tres:145
msgid "Using type hints"
msgstr "使用类型提示"

#: course/lesson-28-specifying-types/lesson.tres:147
msgid ""
"Fortunately, GDScript has optional [i]type hints[/i].\n"
"\n"
"Type hints let the computer know the value type you want for variables and "
"report errors before running the code.\n"
"\n"
"To specify the type a variable can accept, you can write a colon and a type "
"after the name when defining a new variable."
msgstr ""
"幸运的是，GDScript 有可选的 [i] 类型提示[/i]。\n"
"\n"
"类型提示让计算机知道您想要的变量值类型并在运行代码之前报告错误。\n"
"\n"
"要指定变量可以接受的类型，可以在定义新变量时在名称后写一个冒号和一个类型。"

#: course/lesson-28-specifying-types/lesson.tres:171
msgid ""
"You could tell the computer you want [code]cell_size[/code] only to accept "
"[code]Vector2[/code] values like so."
msgstr ""
"您可以告诉计算机您希望 [code]cell_size[/code] 只接受 [code]Vector2[/code] 这"
"样的值。"

#: course/lesson-28-specifying-types/lesson.tres:191
msgid ""
"If you try to replace the [code]cell_size[/code] with a value of another "
"type later, the computer will not let you."
msgstr ""
"如果您稍后尝试将 [code]cell_size[/code] 替换为其他类型的值，计算机将不会让您"
"这样做。"

#: course/lesson-28-specifying-types/lesson.tres:219
msgid "Letting the computer figure it out"
msgstr "让电脑自己解决"

#: course/lesson-28-specifying-types/lesson.tres:221
msgid ""
"GDScript comes with a feature called [i]type inference[/i]. In many cases, "
"but not all, the computer can figure out the type of a variable for you.\n"
"\n"
"To do so, you write [code]:=[/code], without the type. The computer will set "
"the type using the value after the equal sign. We could make "
"[code]cell_size[/code] a variable of type [code]Vector2[/code] like so:"
msgstr ""
"GDScript 带有一个称为 [i]type inference[/i] 的功能。 在许多情况下，但不是全部"
"情况下，计算机可以为您找出变量的类型。\n"
"\n"
"为此，您编写 [code]:=[/code]，不带类型。 计算机将使用等号后面的值设置类型。 "
"我们可以将 [code]cell_size[/code] 设为 [code]Vector2[/code] 类型的变量，如下"
"所示："

#: course/lesson-28-specifying-types/lesson.tres:243
msgid ""
"This takes little typing, yet you get the benefits of using type hints, like "
"the computer reporting errors better and faster."
msgstr ""
"这需要很少的输入，但您会获得使用类型提示的好处，例如计算机更好更快地报告错"
"误。"

#: course/lesson-28-specifying-types/lesson.tres:251
msgid "Why bother to add hints?"
msgstr "为什么要添加提示？"

#: course/lesson-28-specifying-types/lesson.tres:253
msgid ""
"When you give the language hints like that, it will [i]prevent[/i] major "
"type errors. When you work in Godot, you will see that the computer can "
"report issues as you write the code. It makes the benefit even greater.\n"
"\n"
"Type hints can also help improve the readability of your code. It can help "
"to put more information directly in the code. As we saw, types are essential "
"when coding, and when using type hints, the computer will add them to the "
"engine's built-in code documentation system.\n"
"\n"
"There's an incredible third benefit for you: by using type hints, you will "
"learn types much faster. It's excellent for learning.\n"
"\n"
"In the following practices, you will write the correct type hints to make "
"the code error-free."
msgstr ""
"当你给出这样的语言提示时，它将[i]防止[/i]主要类型错误。 当您在 Godot 中工作"
"时，您会看到计算机可以在您编写代码时报告问题。 它使收益更大。\n"
"\n"
"类型提示还可以帮助提高代码的可读性。 它可以帮助将更多信息直接放入代码中。 正"
"如我们所看到的，类型在编码时是必不可少的，当使用类型提示时，计算机会将它们添"
"加到引擎的内置代码文档系统中。\n"
"\n"
"还有一个令人难以置信的第三个好处：通过使用类型提示，您将更快地学习类型。 它非"
"常适合学习。\n"
"\n"
"在以下实践中，您将编写正确的类型提示以使代码无错误。"

#: course/lesson-28-specifying-types/lesson.tres:267
msgid "Add the correct type hints to variables"
msgstr "向变量添加正确的类型提示"

#: course/lesson-28-specifying-types/lesson.tres:268
msgid ""
"Our variables get the correct values but not the right hints. Using your "
"type-fu, add the correct type names in the variable definitions.\n"
"\n"
"You need to write the type name between the colon and the equal sign.\n"
"\n"
"Note: You cannot use type inference in this practice. You need to write the "
"type name in full."
msgstr ""
"我们的变量得到了正确的值，但没有得到正确的提示。 使用您的 type-fu，在变量定义"
"中添加正确的类型名称。\n"
"\n"
"您需要在冒号和等号之间写入类型名称。\n"
"\n"
"注意：您不能在此实践中使用类型推断。 您需要完整填写类型名称。"

#: course/lesson-28-specifying-types/lesson.tres:284
msgid ""
"Our variables have the wrong type hints, causing errors. Correct them to "
"make the code run."
msgstr "我们的变量有错误的类型提示，导致错误。 更正它们以使代码运行。"

#: course/lesson-28-specifying-types/lesson.tres:289
msgid "Fix the values to match the type hints"
msgstr "修复值以匹配类型提示"

#: course/lesson-28-specifying-types/lesson.tres:290
msgid ""
"It is the other way around in this practice: the type hints are fine, but "
"the values are not.\n"
"\n"
"Your task is to fix the values after the equal sign, so they match the type "
"hint of each variable."
msgstr ""
"在这种做法中情况正好相反：类型提示很好，但值不是。\n"
"\n"
"您的任务是修复等号后的值，使它们与每个变量的类型提示相匹配。"

#: course/lesson-28-specifying-types/lesson.tres:304
msgid ""
"This time, it's the other way around: variables have the correct type hints "
"but the wrong values. Change the values to make the code run."
msgstr ""
"这一次，情况正好相反：变量有正确的类型提示，但有错误的值。 更改值以使代码运"
"行。"

#: course/lesson-28-specifying-types/lesson.tres:308
msgid "Specifying types with type hints"
msgstr "使用类型提示指定类型"
