# Translations template for Learn GDScript From Zero.
# Copyright (C) 2022 GDQuest
# This file is distributed under the same license as the Learn GDScript From
# Zero project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Learn GDScript From Zero\n"
"Report-Msgid-Bugs-To: https://github.com/GDQuest/learn-gdscript\n"
"POT-Creation-Date: 2022-06-12 11:07+0200\n"
"PO-Revision-Date: 2022-06-19 11:18+0000\n"
"Last-Translator: adadaadadade <272169607@qq.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"learn-gdscript-from-zero/lesson-23-append-to-arrays/zh_Hans/>\n"
"Language: zh_Hans\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.13.1-dev\n"
"Generated-By: Babel 2.9.1\n"

#: course/lesson-23-append-to-arrays/lesson.tres:13
msgid ""
"In previous lessons, you learned how to create arrays to store lists of "
"values and how to loop over them. It's nice, but you won't go far with only "
"that.\n"
"\n"
"The real strength of arrays is that you can add and remove values from them "
"at any time. It allows you to [i]queue[/i] or [i]stack[/i] data."
msgstr ""
"在之前的课程中，您学习了如何创建数组来存储值列表以及如何循环它们。 这很好，但"
"你不会走得太远。\n"
"\n"
"数组的真正优势在于您可以随时在其中添加和删除值。 它允许您 [i]queue[/i] 或 "
"[i]stack[/i] 数据。"

#: course/lesson-23-append-to-arrays/lesson.tres:25
msgid "For now, let's take another example."
msgstr "现在，让我们再举一个例子。"

#: course/lesson-23-append-to-arrays/lesson.tres:33
msgid "Tracking orders in a restaurant management game"
msgstr "在餐厅管理游戏中跟踪订单"

#: course/lesson-23-append-to-arrays/lesson.tres:35
msgid ""
"You're making a restaurant management game where customers place orders, and "
"you need to handle them as they come.\n"
"\n"
"In this game, customers order meals that end up in a queue. You need to "
"prepare them in the kitchen.\n"
"\n"
"In this example, we simulate orders arriving and getting completed over time."
msgstr ""
"你正在制作一个餐厅管理游戏，顾客在其中下订单，你需要在他们来的时候处理他"
"们。\n"
"\n"
"在这个游戏中，顾客点餐时要排长队。 你需要在厨房里准备它们。\n"
"\n"
"在这个例子中，我们模拟了随着时间的推移到达和完成的订单。"

#: course/lesson-23-append-to-arrays/lesson.tres:59
msgid ""
"How do you keep track of pending and completed orders? With an array!\n"
"\n"
"When a customer purchases a meal, you want to [i]append[/i] it to the array. "
"Then, as you complete a meal in the kitchen and serve it, you want to remove "
"it from the array.\n"
"\n"
"You can do that with the [code]append()[/code] and the [code]pop_front()[/"
"code] functions of the array, respectively.\n"
"\n"
"Try to read the code below before moving on. Don't worry if not everything "
"makes sense, as we'll break it all down."
msgstr ""
"您如何跟踪待处理和已完成的订单？ 带数组！\n"
"\n"
"当客户购买餐点时，您希望将其 [i] 附加[/i] 到数组中。 然后，当您在厨房完成一顿"
"饭并上桌时，您希望将其从阵列中移除。\n"
"\n"
"您可以分别使用数组的 [code]append()[/code] 和 [code]pop_front()[/code] 函数来"
"做到这一点。\n"
"\n"
"在继续之前尝试阅读下面的代码。 如果不是一切都有意义，请不要担心，因为我们将把"
"它全部分解。"

#: course/lesson-23-append-to-arrays/lesson.tres:85
msgid ""
"Notice how we call some functions by writing a dot after a variable name. "
"Like a given value type can have sub-variables, it can also have its own "
"functions.\n"
"\n"
"Functions like [code]append()[/code] and [code]pop_front()[/code] only exist "
"on arrays. That's why to call them, we need to access it from the array "
"using the dot: [code]array.append()[/code]."
msgstr ""
"注意我们如何通过在变量名后写一个点来调用一些函数。 就像给定的值类型可以有子变"
"量一样，它也可以有自己的函数。\n"
"\n"
"[code]append()[/code] 和 [code]pop_front()[/code] 之类的函数只存在于数组中。 "
"这就是调用它们的原因，我们需要使用点从数组中访问它：[code]array.append()[/"
"code]。"

#: course/lesson-23-append-to-arrays/lesson.tres:97
msgid ""
"Let's break down the code.\n"
"\n"
"We queue orders in the [code]waiting_orders[/code] array by appending them "
"to the array."
msgstr ""
"让我们分解代码。\n"
"\n"
"我们通过将订单附加到数组中，在 [code]waiting_orders[/code] 数组中排队。"

#: course/lesson-23-append-to-arrays/lesson.tres:119
msgid ""
"We can use a string to represent a meal when calling the [code]add_order()[/"
"code] function."
msgstr ""
"在调用 [code]add_order()[/code] 函数时，我们可以使用字符串来表示一顿饭。"

#: course/lesson-23-append-to-arrays/lesson.tres:139
msgid ""
"When completing an order, we remove it from the [code]waiting_orders[/code] "
"array by calling its [code]pop_front()[/code] function. This function gives "
"us the order back, which allows us to assign it to a temporary variable."
msgstr ""
"完成订单后，我们通过调用其 [code]pop_front()[/code] 函数将其从 "
"[code]waiting_orders[/code] 数组中移除。 该函数将订单返回给我们，这允许我们将"
"其分配给一个临时变量。"

#: course/lesson-23-append-to-arrays/lesson.tres:159
msgid ""
"We can then append the order to our [code]completed_orders[/code] array."
msgstr "然后我们可以将订单附加到我们的 [code]completed_orders[/code] 数组中。"

#: course/lesson-23-append-to-arrays/lesson.tres:179
msgid ""
"We call arrays like [code]waiting_orders[/code] a [i]queue[/i]: the first "
"element we append to the array is the first one we remove."
msgstr ""
"我们将像 [code]waiting_orders[/code] 这样的数组称为 [i]queue[/i]：我们附加到"
"数组的第一个元素是我们删除的第一个元素。"

#: course/lesson-23-append-to-arrays/lesson.tres:187
msgid "What does #... mean?"
msgstr "这是什么意思？"

#: course/lesson-23-append-to-arrays/lesson.tres:189
msgid ""
"We write [code]#...[/code] to represent ellipses in the code. It means "
"\"we're completing the function's code.\" We use that to break down code "
"examples and make them easier to learn from.\n"
"\n"
"The hash sign itself marks the start of a code comment. It's a line the "
"computer will ignore, which is why it typically appears in grey."
msgstr ""
"我们编写 [code]#...[/code] 来表示代码中的省略号。 这意味着“我们正在完成函数的"
"代码”。 我们使用它来分解代码示例并使它们更容易学习。\n"
"\n"
"井号本身标志着代码注释的开始。 这是计算机将忽略的一条线，这就是它通常显示为灰"
"色的原因。"

#: course/lesson-23-append-to-arrays/lesson.tres:199
msgid "Using arrays as stacks"
msgstr "使用数组作为栈"

#: course/lesson-23-append-to-arrays/lesson.tres:201
msgid ""
"Another common use of arrays is [i]stacks[/i] of data.\n"
"\n"
"Take a factory management game where you need to retrieve materials from "
"stacks of crates. They arrive at the factory piled up vertically, and you "
"need to take them from top to bottom."
msgstr ""
"数组的另一个常见用途是 [i]stacks[/i] 数据。\n"
"\n"
"参加一个工厂管理游戏，您需要从成堆的板条箱中取回材料。 它们到达工厂时垂直堆"
"积，您需要将它们从上到下拿走。"

#: course/lesson-23-append-to-arrays/lesson.tres:223
msgid ""
"To take a crate from the back of the array, this time, we use the "
"[code]pop_back()[/code] array function.\n"
"\n"
"This function removes (pops) the last value from the array and returns it to "
"you.\n"
"\n"
"Here we pop the last value of the array and print what's left of the array "
"to demonstrate how the array gets smaller."
msgstr ""
"为了从数组后面取出一个箱子，这一次，我们使用 [code]pop_back()[/code] 数组函"
"数。\n"
"\n"
"此函数从数组中删除（弹出）最后一个值并将其返回给您。\n"
"\n"
"在这里，我们弹出数组的最后一个值并打印数组的剩余部分以演示数组如何变小。"

#: course/lesson-23-append-to-arrays/lesson.tres:247
msgid ""
"Like [code]pop_front()[/code], the function returns the value removed from "
"the array. You will often store that value in a variable.\n"
"\n"
"The value in question could be the crate's content, which you can then use "
"to give resources to the player.\n"
"\n"
"In the following practices, you will use the [code]append()[/code], "
"[code]pop_front()[/code], and [code]pop_back()[/code] array functions."
msgstr ""
"与 [code]pop_front()[/code] 一样，该函数返回从数组中删除的值。 您通常会将该值"
"存储在变量中。\n"
"\n"
"有问题的值可能是箱子的内容，然后您可以使用它为玩家提供资源。\n"
"\n"
"在以下实践中，您将使用 [code]append()[/code]、[code]pop_front()[/code] 和 "
"[code]pop_back()[/code] 数组函数。"

#: course/lesson-23-append-to-arrays/lesson.tres:259
msgid "Completing orders"
msgstr "完成订单"

#: course/lesson-23-append-to-arrays/lesson.tres:260
msgid ""
"The [code]waiting_orders[/code] array will be filled over time.\n"
"\n"
"Your job is to move orders from the waiting list to the "
"[code]completed_orders[/code] list using the array's [code]append()[/code] "
"and [code]pop_front()[/code] functions.\n"
"\n"
"Remember that the array's [code]pop_front()[/code] function returns the "
"popped value, which allows you to store it in a variable and then pass it to "
"another function."
msgstr ""
"[code]waiting_orders[/code] 数组将随着时间的推移而被填充。\n"
"\n"
"您的工作是使用数组的 [code]append()[/code] 和 [code]pop_front()[/code] 函数将"
"订单从等待列表移动到 [code]completed_orders[/code] 列表。\n"
"\n"
"请记住，数组的 [code]pop_front()[/code] 函数返回弹出的值，这允许您将其存储在"
"变量中，然后将其传递给另一个函数。"

#: course/lesson-23-append-to-arrays/lesson.tres:277
msgid ""
"Orders are piling up in the kitchen, and we need to clear them fast using "
"the array's [code]pop_front()[/code] function."
msgstr ""
"厨房里的订单堆积如山，我们需要使用数组的 [code]pop_front()[/code] 函数快速清"
"除它们。"

#: course/lesson-23-append-to-arrays/lesson.tres:282
msgid "Clearing up the crates"
msgstr "清理箱子"

#: course/lesson-23-append-to-arrays/lesson.tres:283
msgid ""
"Crates are piling up on the platform. Move them out of the way by popping "
"them from the [code]crates[/code] array.\n"
"\n"
"You need to remove them from top to bottom using the array's [code]pop_back()"
"[/code] function.\n"
"\n"
"Your code should remove all the crates in the array using a while loop.\n"
"\n"
"[b]Careful![/b] if you run a while loop carelessly, you can lock the "
"software.\n"
"\n"
"You can check if the [code]crates[/code] array still contains values by "
"writing [code]while crates:[/code]"
msgstr ""
"板条箱在平台上堆积如山。 通过从 [code] crates[/code] "
"数组中弹出它们来将它们移开。\n"
"\n"
"您需要使用数组的 [code]pop_back()[/code] 函数从上到下删除它们。\n"
"\n"
"您的代码应使用 while 循环删除数组中的所有 crate。\n"
"\n"
"[b]小心！[/b]如果你不小心运行了while循环，你可以锁定软件。\n"
"\n"
"您需要通过写[code]while "
"crates:[/code]来检查[code]crates[/code]数组是否还含有值"

#: course/lesson-23-append-to-arrays/lesson.tres:303
msgid ""
"Crates are piling up on the platform. Move them out of the way by popping "
"them from their array."
msgstr "板条箱在平台上堆积如山。 通过将它们从阵列中弹出来将它们移开。"

#: course/lesson-23-append-to-arrays/lesson.tres:307
msgid "Appending and popping values from arrays"
msgstr "从数组中追加和弹出值"
