# Translations template for Learn GDScript From Zero.
# Copyright (C) 2022 GDQuest
# This file is distributed under the same license as the Learn GDScript From
# Zero project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Learn GDScript From Zero\n"
"Report-Msgid-Bugs-To: https://github.com/GDQuest/learn-gdscript\n"
"POT-Creation-Date: 2022-06-12 11:07+0200\n"
"PO-Revision-Date: 2024-02-24 14:02+0000\n"
"Last-Translator: 二中 <worigoule@gmail.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"learn-gdscript-from-zero/lesson-23-append-to-arrays/zh_Hans/>\n"
"Language: zh_Hans\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.5-dev\n"
"Generated-By: Babel 2.9.1\n"

#: course/lesson-23-append-to-arrays/lesson.tres:13
msgid ""
"In previous lessons, you learned how to create arrays to store lists of "
"values and how to loop over them. It's nice, but you won't go far with only "
"that.\n"
"\n"
"The real strength of arrays is that you can add and remove values from them "
"at any time. It allows you to [i]queue[/i] or [i]stack[/i] data."
msgstr ""
"在之前的课程中，你学了如何创建数组来存储一系列的值，以及如何循环遍历数组。 "
"数组很棒，但是只会这点皮毛不能帮到你太多。\n"
"\n"
"数组的真正优势在于，可以随时在其中添加或删除值。 允许你对数据进行 "
"[i]queue[/i] （队列）或 [i]stack[/i] （堆栈）操作。"

#: course/lesson-23-append-to-arrays/lesson.tres:25
msgid "For now, let's take another example."
msgstr "现在，让我们再举一个例子。"

#: course/lesson-23-append-to-arrays/lesson.tres:33
msgid "Tracking orders in a restaurant management game"
msgstr "在餐厅管理游戏中跟踪订单顺序"

#: course/lesson-23-append-to-arrays/lesson.tres:35
msgid ""
"You're making a restaurant management game where customers place orders, and "
"you need to handle them as they come.\n"
"\n"
"In this game, customers order meals that end up in a queue. You need to "
"prepare them in the kitchen.\n"
"\n"
"In this example, we simulate orders arriving and getting completed over time."
msgstr ""
"假设你正在制作一个餐厅管理游戏，顾客在餐厅下单了食物，你需要在出餐时候送过去"
"。\n"
"\n"
"在这个游戏中，顾客点餐完了会排成长队等待。 你需要在厨房里准备他们的食物。\n"
"\n"
"这个例子中，我们模拟了一种订单模式，按时间推移会出现订单，紧接着会被完成。"

#: course/lesson-23-append-to-arrays/lesson.tres:59
msgid ""
"How do you keep track of pending and completed orders? With an array!\n"
"\n"
"When a customer purchases a meal, you want to [i]append[/i] it to the array. "
"Then, as you complete a meal in the kitchen and serve it, you want to remove "
"it from the array.\n"
"\n"
"You can do that with the [code]append()[/code] and the [code]pop_front()[/"
"code] functions of the array, respectively.\n"
"\n"
"Try to read the code below before moving on. Don't worry if not everything "
"makes sense, as we'll break it all down."
msgstr ""
"该怎样跟踪待处理和已完成的订单？用上数组！\n"
"\n"
"当客户购买餐点时，你得将它 [i]追加[/i] 到数组中（append）。 "
"然后，当你在厨房完成一餐并出餐时，需要将其从数组中移除。\n"
"\n"
"你可以分别使用数组的 [code]append()[/code] （列尾追加）和 "
"[code]pop_front()[/code]（首格出列）函数来做到这一点。\n"
"\n"
"在继续之前，先试试看阅读下面的代码。 "
"如果不能一下就看懂，请不要担心，因为我们会分开讲解。"

#: course/lesson-23-append-to-arrays/lesson.tres:85
msgid ""
"Notice how we call some functions by writing a dot after a variable name. "
"Like a given value type can have sub-variables, it can also have its own "
"functions.\n"
"\n"
"Functions like [code]append()[/code] and [code]pop_front()[/code] only exist "
"on arrays. That's why to call them, we need to access it from the array "
"using the dot: [code]array.append()[/code]."
msgstr ""
"注意，在变量名后写一个点可以调用一些函数。 "
"就像给定的值类型可以有子变量一样，它也可以有自己的函数。\n"
"\n"
"[code]append()[/code] 和 [code]pop_front()[/code] 之类的函数只存在于数组中。 "
"调用它们就是为了处理数组，我们得用点才能从数组中访问到：[code]array."
"append()[/code]。"

#: course/lesson-23-append-to-arrays/lesson.tres:97
msgid ""
"Let's break down the code.\n"
"\n"
"We queue orders in the [code]waiting_orders[/code] array by appending them "
"to the array."
msgstr ""
"让我们来一步步分解代码。\n"
"\n"
"我们让订单在 [code]waiting_orders[/code] "
"（候餐）数组中排好队，用到了“追加（append）到数组”的方式。"

#: course/lesson-23-append-to-arrays/lesson.tres:119
msgid ""
"We can use a string to represent a meal when calling the [code]add_order()[/"
"code] function."
msgstr "在调用 [code]add_order()[/code] "
"（追加订单）函数时，可以用字符串来表示某一顿饭。"

#: course/lesson-23-append-to-arrays/lesson.tres:139
msgid ""
"When completing an order, we remove it from the [code]waiting_orders[/code] "
"array by calling its [code]pop_front()[/code] function. This function gives "
"us the order back, which allows us to assign it to a temporary variable."
msgstr ""
"订单完成后，通过调用数组的 [code]pop_front()[/code] 函数，将它从 "
"[code]waiting_orders[/code] 数组中移除。 "
"该函数会将这个移除的订单作为参数返回，这样就可以把它分配给一个临时变量。"

#: course/lesson-23-append-to-arrays/lesson.tres:159
msgid ""
"We can then append the order to our [code]completed_orders[/code] array."
msgstr "然后就可以将这个订单追加到我们的 [code]completed_orders[/code] "
"（已经完成的订单）数组中。"

#: course/lesson-23-append-to-arrays/lesson.tres:179
msgid ""
"We call arrays like [code]waiting_orders[/code] a [i]queue[/i]: the first "
"element we append to the array is the first one we remove."
msgstr ""
"我们将类似 [code]waiting_orders[/code] 这样的数组称为 "
"[i]queue[/i]（队列）：最早被追加进数组的，会被第一个移除。"

#: course/lesson-23-append-to-arrays/lesson.tres:187
msgid "What does #... mean?"
msgstr "这里的#...是什么意思？"

#: course/lesson-23-append-to-arrays/lesson.tres:189
msgid ""
"We write [code]#...[/code] to represent ellipses in the code. It means "
"\"we're completing the function's code.\" We use that to break down code "
"examples and make them easier to learn from.\n"
"\n"
"The hash sign itself marks the start of a code comment. It's a line the "
"computer will ignore, which is why it typically appears in grey."
msgstr ""
"我们用 [code]#...[/code] 来表示代码中的省略部分。 "
"代表“假设这块函数的功能是写完了的”。 用它来分解代码示例，更便于学习。\n"
"\n"
"#井号本身标志着“代码注释”的开始。 "
"#号后面一整行会被计算机忽略，这就是它通常显示为灰色的原因。"

#: course/lesson-23-append-to-arrays/lesson.tres:199
msgid "Using arrays as stacks"
msgstr "使用数组实现堆栈（stack）"

#: course/lesson-23-append-to-arrays/lesson.tres:201
msgid ""
"Another common use of arrays is [i]stacks[/i] of data.\n"
"\n"
"Take a factory management game where you need to retrieve materials from "
"stacks of crates. They arrive at the factory piled up vertically, and you "
"need to take them from top to bottom."
msgstr ""
"数组的另一个常见用途是对数据进行 [i]堆栈[/i]（stack）处理。\n"
"\n"
"假设有一个工厂管理游戏，需要你从垒起来的板条箱中取回原材料。 "
"箱子到达工厂时是垂直堆积起来的，需要你将它们从上到下拿走。"

#: course/lesson-23-append-to-arrays/lesson.tres:223
msgid ""
"To take a crate from the back of the array, this time, we use the "
"[code]pop_back()[/code] array function.\n"
"\n"
"This function removes (pops) the last value from the array and returns it to "
"you.\n"
"\n"
"Here we pop the last value of the array and print what's left of the array "
"to demonstrate how the array gets smaller."
msgstr ""
"为了从箱子数组的尾部取出一个箱子，这次，要用到数组函数 "
"[code]pop_back()[/code] （尾部出列）。\n"
"\n"
"此函数从数组中删除（弹出）最后一个值并将其作为参数返回。\n"
"\n"
"在这里，我们弹出数组的最后一个值，然后打印出数组的剩余部分，以演示数组是如何"
"变小的。"

#: course/lesson-23-append-to-arrays/lesson.tres:247
msgid ""
"Like [code]pop_front()[/code], the function returns the value removed from "
"the array. You will often store that value in a variable.\n"
"\n"
"The value in question could be the crate's content, which you can then use "
"to give resources to the player.\n"
"\n"
"In the following practices, you will use the [code]append()[/code], "
"[code]pop_front()[/code], and [code]pop_back()[/code] array functions."
msgstr ""
"与 [code]pop_front()[/code] 一样，该函数会将从数组中删除的值返回。 "
"通常需要将该值存储在某个变量中。\n"
"\n"
"函数找到的值可以是箱子里装的具体的内容，然后你就可以使用这个栈来为玩家提供资"
"源。\n"
"\n"
"在以下练习中，你会用到数组的 [code]append()[/code]、[code]pop_front()[/code] "
"和 [code]pop_back()[/code] 函数。"

#: course/lesson-23-append-to-arrays/lesson.tres:259
msgid "Completing orders"
msgstr "完成订单"

#: course/lesson-23-append-to-arrays/lesson.tres:260
msgid ""
"The [code]waiting_orders[/code] array will be filled over time.\n"
"\n"
"Your job is to move orders from the waiting list to the "
"[code]completed_orders[/code] list using the array's [code]append()[/code] "
"and [code]pop_front()[/code] functions.\n"
"\n"
"Remember that the array's [code]pop_front()[/code] function returns the "
"popped value, which allows you to store it in a variable and then pass it to "
"another function."
msgstr ""
"[code]waiting_orders[/code] 数组将随着时间的推移而被塞满订单。\n"
"\n"
"你的工作是使用数组的 [code]append()[/code] 和 [code]pop_front()[/code] "
"函数将订单从等待列表（waiting_orders）移动到列表 "
"[code]completed_orders[/code] 。\n"
"\n"
"请记住，数组的 [code]pop_front()[/code] "
"函数会返回弹出的值，允许你将其存储在变量中，然后就可以传递给其他的函数。"

#: course/lesson-23-append-to-arrays/lesson.tres:277
msgid ""
"Orders are piling up in the kitchen, and we need to clear them fast using "
"the array's [code]pop_front()[/code] function."
msgstr ""
"厨房里的订单堆积如山，我们需要使用数组的 [code]pop_front()[/code] 函数快速清"
"除它们。"

#: course/lesson-23-append-to-arrays/lesson.tres:282
msgid "Clearing up the crates"
msgstr "清理箱子"

#: course/lesson-23-append-to-arrays/lesson.tres:283
msgid ""
"Crates are piling up on the platform. Move them out of the way by popping "
"them from the [code]crates[/code] array.\n"
"\n"
"You need to remove them from top to bottom using the array's [code]pop_back()"
"[/code] function.\n"
"\n"
"Your code should remove all the crates in the array using a while loop.\n"
"\n"
"[b]Careful![/b] if you run a while loop carelessly, you can lock the "
"software.\n"
"\n"
"You can check if the [code]crates[/code] array still contains values by "
"writing [code]while crates:[/code]"
msgstr ""
"板条箱在平台上堆积如山。 从 [code] "
"crates[/code]（箱子）数组中弹出它们，将它们移走。\n"
"\n"
"你需要用到数组的 [code]pop_back()[/code] 函数，从上到下地删除它们。\n"
"\n"
"你的代码要用 while 循环依次删除数组中所有的箱子。\n"
"\n"
"[b]当心！[/b]如果你不小心搞出了while死循环，搞不好会让这个软件宕机噢。\n"
"\n"
"通过写[code]while crates:[/code]，可以检查到[code]crates[/code]数组中是否还含"
"有值（意思是说空数组会返回false，还有东西会返回true）"

#: course/lesson-23-append-to-arrays/lesson.tres:303
msgid ""
"Crates are piling up on the platform. Move them out of the way by popping "
"them from their array."
msgstr "地上的板条箱堆积如山。将它们从数组中弹出，将它们移走。"

#: course/lesson-23-append-to-arrays/lesson.tres:307
msgid "Appending and popping values from arrays"
msgstr "从数组中追加或弹出值"
