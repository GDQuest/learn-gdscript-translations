# Translations template for Learn GDScript From Zero.
# Copyright (C) 2022 GDQuest
# This file is distributed under the same license as the Learn GDScript From
# Zero project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Learn GDScript From Zero\n"
"Report-Msgid-Bugs-To: https://github.com/GDQuest/learn-gdscript\n"
"POT-Creation-Date: 2023-05-16 09:25+0200\n"
"PO-Revision-Date: 2024-02-29 13:51+0000\n"
"Last-Translator: 二中 <worigoule@gmail.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"learn-gdscript-from-zero/lesson-8-defining-variables/zh_Hans/>\n"
"Language: zh_Hans\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.5-dev\n"
"Generated-By: Babel 2.9.1\n"

#: course/lesson-8-defining-variables/lesson.tres:13
msgid ""
"In the previous lesson, you used a predefined member variable named "
"[code]position[/code].\n"
"\n"
"In your projects, you will need to define your own variables.\n"
"\n"
"Imagine that you need to track the player's health in your game.\n"
"\n"
"They may start with [code]5[/code] health points. When taking a hit, the "
"health should go down to [code]4[/code]. After another hit, it should be "
"[code]3[/code]. And so on.\n"
"\n"
"To keep track of that, you can create a variable named [code]health[/code] "
"to which you add and subtract points.\n"
"\n"
"The example below introduces the [code]print()[/code] function, which "
"outputs its argument to the output box on the left.\n"
"\n"
"Click the [i]run()[/i] button to instantly run the entire function, and "
"click the [i]step[/i] button to execute lines of code one by one.\n"
"\n"
"The [i]Debugger[/i] panel at the bottom shows the current value of the "
"[code]health[/code] variable."
msgstr ""
"在上一课中，你使用了一个名为 [code]position[/code] 的预定义成员变量。\n"
"\n"
"在你的项目中，你是需要自己定义变量的。\n"
"\n"
"想象一下，你需要在游戏中跟踪玩家的血量状况。\n"
"\n"
"玩家可能从 [code]5[/code] 点血开始。受到打击时，生命值应降至 "
"[code]4[/code]。再次受击后，应该是 [code]3[/code]。等等。\n"
"\n"
"要跟踪这一点，你可以创建一个名为 [code]health[/code] "
"的变量，用它来增加或减去血量值。\n"
"\n"
"[i]下面的例子介绍了[code]print()[/code]函数，它会把它的参数输出到左侧的输出框"
"。[/i]\n"
"\n"
"点击 [i]run()[/i]按钮可以立刻运行整个函数，或者点击 [i]step[/i] "
"（步进）按钮，这样程序会一行一行地执行。\n"
"\n"
"下方的[i]Debugger[/i]面板会显示出实时的[code]health[/code] 值的变化。"

#: course/lesson-8-defining-variables/lesson.tres:47
msgid ""
"After executing the first two lines of code, you will have a health variable "
"storing a value of [code]4[/code].\n"
"\n"
"Below, we'll break down how you define new variables and explain the "
"[code]print()[/code] function."
msgstr ""
"执行前两行代码后，你会得到一个储存 [code]4[/code] 的health变量。\n"
"\n"
"下面，我们将分解定义新变量的步骤，并解释 [code]print()[/code] 函数。"

#: course/lesson-8-defining-variables/lesson.tres:57
msgid "Defining a variable"
msgstr "定义一个变量"

#: course/lesson-8-defining-variables/lesson.tres:59
msgid ""
"To use a variable, you must first define it so the computer registers its "
"name.\n"
"\n"
"To do so, you start a line of code with the [code]var[/code] keyword "
"followed by your desired variable name. Like [code]func[/code] stands for "
"[i]function[/i], [code]var[/code] stands for [i]variable[/i].\n"
"\n"
"Variables are case-sensitive, which means [code]health[/code] and "
"[code]Health[/code] are technically different variables. Be careful to use "
"the same capitalization wherever you refer to the same variable, or you "
"could be reading or writing to a different variable.\n"
"\n"
"The following line defines a [code]health[/code] variable pointing to no "
"value. You can think of it as creating a product label you have yet to stick "
"onto something."
msgstr ""
"要使用变量，你必须首先定义它，以便计算机注册它的名称。\n"
"\n"
"为此，首先用 [code]var[/code] 关键字写一行代码，后跟所需的变量名称。就像 "
"[code]func[/code] 代表 [i]function[/i]（函数），[code]var[/code] 代表 "
"[i]variable[/i]（变量）。\n"
"\n"
"变量是区分大小写的，也就是说 [code]health[/code] 和[code]Health[/code]是完全"
"不同的两个变量。当你要用到一个变量的时候，要留意大小写是否一致，否则你写出来"
"的或者看到的就完全是另一个变量。\n"
"\n"
"下面一行定义了一个没有值的 [code]health[/code] "
"变量。你可以想成这是做了一个还没贴在商品上的产品标签。"

#: course/lesson-8-defining-variables/lesson.tres:85
msgid ""
"Like with functions, a member variable's name must be unique inside a given "
"code file. Creating two variables next to each other with the same name will "
"cause an error."
msgstr "与函数一样，成员变量的名称在给定代码文件中必须是唯一的。挨着创建两个名称相同"
"的变量将导致错误。"

#: course/lesson-8-defining-variables/lesson.tres:105
msgid ""
"To use a variable, you want to assign it a starting value. You can do so "
"using the equal sign (=).\n"
"\n"
"This code assigns the value [code]100[/code] to a new variable named "
"[code]health[/code]."
msgstr ""
"要使用变量，你需要为其分配一个起始值。你可以使用等号 (=) 执行此操作。\n"
"\n"
"此代码将值 [code]100[/code] 分配给名为 [code]health[/code] 的新创建的变量。"

#: course/lesson-8-defining-variables/lesson.tres:127
msgid ""
"After defining your variable, you can access its value by writing the "
"variable's name."
msgstr "定义变量后，你可以通过写入变量的名称来访问它的值。"

#: course/lesson-8-defining-variables/lesson.tres:147
msgid ""
"The code above will display the number [code]100[/code] to some output "
"window.\n"
"\n"
"Notice we don't use the [code]var[/code] keyword anymore as we only need it "
"to [i]define[/i] a variable.\n"
"\n"
"Also, once you define a variable, you can change its value anytime with the "
"equal sign."
msgstr ""
"上面的代码将在某个输出窗口显示数字 [code]100[/code]。\n"
"\n"
"请注意，我们不需要重复写 [code]var[/code] 关键字，因为我们只需要它来 "
"[i]定义[/i] 一个变量。\n"
"\n"
"此外，一旦你定义了一个变量，你可以随时用等号改变它的值。"

#: course/lesson-8-defining-variables/lesson.tres:169
msgid "About the print function"
msgstr "关于print函数"

#: course/lesson-8-defining-variables/lesson.tres:171
msgid ""
"The [code]print()[/code] function is generally the first function you learn "
"in academic programming courses.\n"
"\n"
"It sends (\"prints\") the message or value you give it to some output "
"window, often a black window with plain white text."
msgstr ""
"[code]print()[/code] （打印）函数通常是你在学校编程课程中学习的第一个函数。\n"
"\n"
"它将你给它的消息或值发送（“打印”）到某个输出窗口，通常是带有白色文本的黑色窗"
"口。"

#: course/lesson-8-defining-variables/lesson.tres:183
msgid ""
"Programmers often use [code]print()[/code] to quickly check the value of "
"their variables when their game runs.\n"
"\n"
"In the app, we made a special output window that captures calls to "
"[code]print()[/code] and displays a card to make it friendlier for you."
msgstr ""
"程序员经常在游戏运行时使用 [code]print()[/code] 来快速检查变量的值。\n"
"\n"
"在这个教程软件中，我们制作了一个特殊的输出窗口，它会捕获对 "
"[code]print()[/code] 的调用并显示这些小卡片，这样对你来说用起来更友好。"

#: course/lesson-8-defining-variables/lesson.tres:205
msgid ""
"Here, the verb [i]print[/i] means \"to send information to display on the "
"screen.\"\n"
"\n"
"The function \"prints\" things on your computer display; It does not relate "
"to printers."
msgstr ""
"在这里，动词 [i]print[/i]（打印） 的意思是“发送信息以显示在屏幕上”。\n"
"\n"
"该函数在你的计算机显示器上“打印”东西；它与打印机无关。"

#: course/lesson-8-defining-variables/lesson.tres:215
msgid "Variables are like labels"
msgstr "变量就像标签"

#: course/lesson-8-defining-variables/lesson.tres:217
msgid ""
"As we hinted above, in GDScript, variables work a bit like labels.\n"
"\n"
"Assigning a value to a variable is like taking your label (the variable) and "
"sticking it onto some item (the value)."
msgstr ""
"正如我们之前提到过的，在 GDScript 中，变量的工作方式有点像标签。\n"
"\n"
"给变量赋值就像把你的标签（变量）贴到某个东西（值）上。"

#: course/lesson-8-defining-variables/lesson.tres:229
msgid ""
"Like a supermarket has a database of product labels, the computer keeps a "
"list of all variables in your code.\n"
"\n"
"Given the variable name, the computer can look up the attached value.\n"
"\n"
"It has an important consequence. In GDScript, you can stick that label to "
"any other value."
msgstr ""
"就像超市有一个产品标签数据库一样，计算机会在你的代码中保存一份所有变量的列表"
"。\n"
"\n"
"给定变量名称，计算机可以查找对应的值。\n"
"\n"
"它有一个重要的效果。在 GDScript 中，你可以将该标签粘贴到任何其他值上。"

#: course/lesson-8-defining-variables/lesson.tres:253
msgid ""
"The above code is like taking a label from the appropriate item and sticking "
"it to the wrong thing:\n"
"\n"
"- At line 2, the [code]health[/code] variable holds a number.\n"
"- From line 3, [code]health[/code] holds text.\n"
"\n"
"The computer will let you do that! The code's syntax and \"grammar\" are "
"correct, but it's not good.\n"
"\n"
"Variable names should describe the value they contain, so a [code]health[/"
"code] variable with a text value will confuse your future self and other "
"coders. It can also cause errors in your game.\n"
"\n"
"Later on, we'll see how to avoid this issue with [i]variable types[/i]. For "
"now, let's practice creating variables!"
msgstr ""
"上面的代码就像把标签从合适的物品上取下又贴到了错误的东西上：\n"
"\n"
"- 在第 2 行时，[code]health[/code] 变量装的是数字。\n"
"- 从第 3 行开始，[code]health[/code] 装的是文本了。\n"
"\n"
"电脑会允许你这么做！这段代码是符合句法（syntax）和“语法（grammar）”的，但这样"
"做不太好。\n"
"\n"
"变量名最好能描述它里面的值是什么，所以一个叫做[code]health[/code] 的变量里面"
"的值却是文本，将来的你和你的同事看到这里会很懵。这样还会让你的游戏出现错误。"
"\n"
"\n"
"稍后的课程里，我们会看到如何使用 [i] 变量类型 [/i] "
"来避免这个问题。但是现在，让我们来练习创建变量！"

#: course/lesson-8-defining-variables/lesson.tres:270
msgid "Define a health variable"
msgstr "定义一个health变量"

#: course/lesson-8-defining-variables/lesson.tres:271
msgid ""
"Define a variable named [code]health[/code] with a starting value of "
"[code]100[/code].\n"
"\n"
"You can define variables inside or outside functions. In this practice, you "
"shouldn't create a function."
msgstr ""
"定义一个名为 [code]health[/code] 的变量，其起始值为 [code]100[/code]。\n"
"\n"
"在函数内部或外部定义变量都是可以的。在这个练习中，你犯不上创建一个函数。"

#: course/lesson-8-defining-variables/lesson.tres:282
msgid ""
"In this practice, you'll define your first variable and give it a specific "
"starting value."
msgstr "在本练习中，你将定义你的第一个变量并为其指定一个特定的起始值。"

#: course/lesson-8-defining-variables/lesson.tres:286
msgid "Defining Your Own Variables"
msgstr "定义你自己的变量"
