# Translations template for Learn GDScript From Zero.
# Copyright (C) 2022 GDQuest
# This file is distributed under the same license as the Learn GDScript From
# Zero project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Learn GDScript From Zero\n"
"Report-Msgid-Bugs-To: https://github.com/GDQuest/learn-gdscript\n"
"POT-Creation-Date: 2022-03-26 17:50+0100\n"
"PO-Revision-Date: 2024-02-18 15:01+0000\n"
"Last-Translator: 二中 <worigoule@gmail.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"learn-gdscript-from-zero/lesson-20-looping-over-arrays/zh_Hans/>\n"
"Language: zh_Hans\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.4\n"
"Generated-By: Babel 2.9.1\n"

#: course/lesson-20-looping-over-arrays/lesson.tres:14
msgid ""
"We used the [code]range()[/code] function in combination with "
"[code]for[/code] loops."
msgstr "之前我们把 [code]range()[/code] 函数和 [code]for[/code] 循环结合使用。"

#: course/lesson-20-looping-over-arrays/lesson.tres:34
msgid ""
"The [code]range()[/code] function produced an array that the "
"[code]for[/code] keyword could loop over.\n"
"\n"
"We can give [code]for[/code] loops [i]any[/i] array, and they will loop "
"over them just the same.\n"
"\n"
"Instead of using the [code]range()[/code] function, we could manually "
"write the numbers and get the same result."
msgstr ""
"[code]range()[/code] 函数生成了一个数组，[code]for[/code] "
"关键字可以循环遍历该数组。\n"
"\n"
"其实可以给 [code]for[/code] 循环 [i]任何[/i] "
"数组，它会以同样的方式循环遍历它们。\n"
"\n"
"而且不用 [code]range()[/code] 函数，也可以手动编写数组并得到相同的结果。"

#: course/lesson-20-looping-over-arrays/lesson.tres:58
msgid ""
"For each element inside the array, the [code]for[/code] loop extracts it,"
" stores it in the temporary variable named [code]number[/code], and "
"executes the loop's code once.\n"
"\n"
"Inside the loop, you can access the [code]number[/code] variable, which "
"changes on each [i]iteration[/i].\n"
"\n"
"The code works regardless of the array or where you store it. Often, you "
"will store arrays in variables for easy access."
msgstr ""
"对于数组中的每个元素，[code]for[/code] 循环将其提取出来，存储在名为 "
"[code]number[/code] 的临时变量中，并执行一次循环的代码。\n"
"\n"
"在循环内部，可以访问到 [code]number[/code] 变量，该变量在每次 [i]迭代[/i] "
"时都会发生变化。\n"
"\n"
"无论数组的形式是怎样的，数组存储位置在哪儿，该代码都有效。 "
"通常来说，会将数组存储在变量中以便于访问。"

#: course/lesson-20-looping-over-arrays/lesson.tres:80
msgid "What will this code print?"
msgstr "这段代码会打印（print）什么？"

#: course/lesson-20-looping-over-arrays/lesson.tres:81
msgid ""
"[code]var numbers = [0, 1, 2]\n"
"for number in numbers:\n"
"    print(number)\n"
"[/code]"
msgstr ""
"[code]var numbers = [0, 1, 2]\n"
"for number in numbers:\n"
"    print(number)\n"
"[/code]"

#: course/lesson-20-looping-over-arrays/lesson.tres:86
msgid ""
"Compared to previous examples, we store the array in the "
"[code]numbers[/code] variable. Using the [code]numbers[/code] variable in"
" our [code]for[/code] loop allows the computer to access the array of "
"numbers like before.\n"
"\n"
"We have three numbers in the array: [code]0[/code], [code]1[/code], and "
"[code]2[/code].\n"
"\n"
"The loop extracts each of them sequentially and assigns it to the "
"[code]number[/code] temporary variable. As the loop processes each "
"number, the output will print [code]0[/code], then [code]1[/code], then "
"[code]2[/code], each on a separate line."
msgstr ""
"与前面的示例不同的是，数组被存储在 [code]numbers[/code] 变量中。 在 "
"[code]for[/code] 循环中使用 [code]numbers[/code] "
"数组变量，计算机也能像以前一样访问到数字数组。\n"
"\n"
"在我们的数组中有三个数字：[code]0[/code]、[code]1[/code] 和 [code]2[/code]。"
"\n"
"\n"
"循环依次提取每一个数并将其分配给临时变量 [code]number[/code] 。 "
"当循环依次处理数字时，输出将打印 [code]0[/code]，然后是 [code]1[/code]，"
"然后是 [code]2[/code]，每个数字在单独的一行。"

#: course/lesson-20-looping-over-arrays/lesson.tres:91
#: course/lesson-20-looping-over-arrays/lesson.tres:92
msgid "0, 1, and 2"
msgstr "0, 1, 和 2"

#: course/lesson-20-looping-over-arrays/lesson.tres:91
msgid "1, 2, and 3"
msgstr "1, 2, 和 3"

#: course/lesson-20-looping-over-arrays/lesson.tres:91
msgid "0, 0, and 0"
msgstr "0, 0, 和 0"

#: course/lesson-20-looping-over-arrays/lesson.tres:99
msgid "Making the turtle walk, with a loop"
msgstr "用循环让小海龟移动"

#: course/lesson-20-looping-over-arrays/lesson.tres:101
msgid ""
"In the previous lesson, you made a turtle walk along a path by writing "
"[code]Vector2[/code] coordinates in an array."
msgstr "在上一课中，你在数组中写入 [code]Vector2[/code] "
"坐标组，成功让海龟沿着路径移动了。"

#: course/lesson-20-looping-over-arrays/lesson.tres:121
msgid ""
"It's a [code]for[/code] loop that makes the turtle walk along the path.\n"
"\n"
"The loop works like this: for each coordinate in the array, it moves the "
"turtle once to that cell."
msgstr ""
"下面是一个 [code]for[/code] 循环，使海龟沿着路径移动。\n"
"\n"
"循环的工作方式如下：对于数组中的每个坐标，它会让海龟移动一格。"

#: course/lesson-20-looping-over-arrays/lesson.tres:143
msgid "It's the same principle with unit selection."
msgstr "与选中多个单位的原理是相同的。"

#: course/lesson-20-looping-over-arrays/lesson.tres:163
msgid ""
"For each coordinate in an array named [code]selected_units[/code], we "
"check if there is a unit in that cell. If so, we select it. \n"
"\n"
"In that case, we use an array, a loop, and a condition together."
msgstr ""
"对于名为 [code]selected_units[/code] "
"（选中单位）的数组中的每个坐标，我们检查该单元格中是否有一个单元。 "
"如果是这样，选中它。\n"
"\n"
"在这个例子中，会结合使用到数组、循环和条件语句。"

#: course/lesson-20-looping-over-arrays/lesson.tres:185
msgid ""
"The code above uses several features you haven't learned yet:\n"
"\n"
"- In a condition, the [code]in[/code] keyword allows you to check if a "
"value exists [i]in[/i] an array.\n"
"- The array's [code]append()[/code] function appends a new value at the "
"end of the array.\n"
"\n"
"Notice the use of a period after the [code]selected_units[/code] "
"variable, to call the [code]append()[/code] function. It's because this "
"function exists only on arrays.\n"
"\n"
"When functions exist only on a specific value type, you write a dot after"
" the value to call the function on it.\n"
"\n"
"We'll revisit those two features again in the following lessons."
msgstr ""
"上面的代码使用了几个你还没有学过的特性：\n"
"\n"
"- 在条件中，[code]in[/code] "
"关键字可以检查变量cell的值是否在数组unit里。[i]在···里面（in）[/i]\n"
"- 数组的 [code]append()[/code] 函数会在数组末尾追加一个新值。\n"
"\n"
"注意在 [code]selected_units[/code] 变量之后使用句点（.）来调用 "
"[code]append()[/code] 函数。 这是因为这个函数只依赖于数组存在。\n"
"\n"
"当函数只在特定的值类型上存在时，你可以在值后面写一个点来调用属于它的函数。\n"
"\n"
"在接下来的课程中，我们会重温这两个功能的。"

#: course/lesson-20-looping-over-arrays/lesson.tres:204
msgid ""
"The beauty of loops is that they work regardless of the size of your "
"arrays. \n"
"\n"
"The code just works whether you have one or ten thousand units to select."
" It is all accomplished with only a couple lines of code.\n"
"\n"
"That's the power of computer programming.\n"
"\n"
"In the following practices, you will use arrays combined with "
"[code]for[/code] loops to achieve similar results."
msgstr ""
"循环的美妙之处在于，无论数组大小如何，它都可以工作。\n"
"\n"
"无论是要选择一个单位还是一万个单位，该代码都可以正常工作。 "
"都只需要这几行代码即可完成。\n"
"\n"
"这就是计算机编程的力量。\n"
"\n"
"在下面的练习中，你要用数组结合 [code]for[/code] 循环来实现类似的结果。"

#: course/lesson-20-looping-over-arrays/lesson.tres:218
msgid "Move the robot along the path"
msgstr "沿路径移动机器人"

#: course/lesson-20-looping-over-arrays/lesson.tres:219
msgid ""
"Our AI pathfinding algorithm provided a path for the robot to move to the"
" right edge of the grid. Your task is to use a [code]for[/code] loop to "
"make the robot move.\n"
"\n"
"To move the robot, call [i]its[/i] [code]move_to()[/code] function, like "
"so: [code]robot.move_to()[/code].\n"
"\n"
"The [code]move_to()[/code] function only exists on the robot, which is "
"why you need to access it this way."
msgstr ""
"我们的 AI 寻路算法为机器人移动到网格的右边提供了一条路径。 你的任务是使用 "
"[code]for[/code] 循环使机器人移动。\n"
"\n"
"要移动机器人，请调用[i]它的[/i] [code]move_to()[/code] "
"函数，如下所示：[code]robot.move_to()[/code]。\n"
"\n"
"此处的 [code]move_to()[/code] "
"函数仅存在于机器人上，这就是需要以这种方式访问它的原因。"

#: course/lesson-20-looping-over-arrays/lesson.tres:235
msgid ""
"Our AI pathfinding algorithm is giving us a path to move the robot. Now, "
"you need to make the turtle move along the path."
msgstr "我们的 AI 寻路算法为我们提供了移动机器人的路径。 "
"现在，你需要让小海龟沿着路径移动。"

#: course/lesson-20-looping-over-arrays/lesson.tres:240
msgid "Back to the drawing board"
msgstr "回到那个绘图板上"

#: course/lesson-20-looping-over-arrays/lesson.tres:241
msgid ""
"We want to draw many rectangles, something surprisingly common in games.\n"
"\n"
"However, writing this code by hand can get tedious. Instead, you could "
"store the size of your shapes in arrays and use a loop to draw them all "
"in batches.\n"
"\n"
"That's what you'll do in this practice.\n"
"\n"
"Use a [code]for[/code] loop to draw every rectangle in the "
"[code]rectangle_sizes[/code] array with the [code]draw_rectangle()[/code]"
" function.\n"
"\n"
"The rectangles shouldn't overlap or cross each other. To avoid that, "
"you'll need to call the [code]jump()[/code] function."
msgstr ""
"我们想要绘制许多矩形，这在游戏中非常常见。\n"
"\n"
"但是，手动编写此代码可能会很乏味。 "
"相反，你可以将形状的大小存储在数组中，并使用循环批量绘制它们。\n"
"\n"
"这就是你在这个练习中要做的。\n"
"\n"
"使用 [code]for[/code] 循环通过 [code]draw_rectangle()[/code] （画长方形）"
"函数绘制 [code]rectangle_sizes[/code] （长方形尺寸）数组中的每个矩形。\n"
"\n"
"矩形不能相互重叠或者交叉。 为避免这种情况，你需要调用 [code]jump()[/code] "
"（让海龟跳走）函数。"

#: course/lesson-20-looping-over-arrays/lesson.tres:261
msgid ""
"The drawing turtle makes its comeback. Fear not! Armed with loops, you'll"
" make it draw faster than ever before."
msgstr "绘图小海龟卷土重来。 不要害怕！ "
"装备循环这个新武器，你将能让它的绘制速度比以往任何时候都快。"

#: course/lesson-20-looping-over-arrays/lesson.tres:265
msgid "Looping over arrays"
msgstr "用循环遍历数组"
