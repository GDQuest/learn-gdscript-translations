# Translations template for Learn GDScript From Zero.
# Copyright (C) 2022 GDQuest
# This file is distributed under the same license as the Learn GDScript From
# Zero project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Learn GDScript From Zero\n"
"Report-Msgid-Bugs-To: https://github.com/GDQuest/learn-gdscript\n"
"POT-Creation-Date: 2023-05-16 09:25+0200\n"
"PO-Revision-Date: 2022-04-05 06:51+0000\n"
"Last-Translator: wonsama <imtough99@gmail.com>\n"
"Language-Team: Korean <https://hosted.weblate.org/projects/learn-gdscript-"
"from-zero/glossary_database/ko/>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.12-dev\n"
"Generated-By: Babel 2.9.1\n"

#. Reference: member function
#: course/glossary.csv:6
msgid "member function"
msgstr "멤버 함수"

#. Reference: member function
#: course/glossary.csv:6
msgid "member functions"
msgstr "멤버 함수들"

#. Reference: member function
#: course/glossary.csv:6
msgid ""
"Member functions are functions attached to a specific value type, like "
"arrays, strings, or dictionaries. We also call them methods.\n"
"\n"
"For example, arrays have member functions like [code]array.append()[/code].\n"
"\n"
"You can only call the function on an array, using the access operator "
"([code].[/code]) to access it, as shown above."
msgstr ""
"멤버 함수는 배열, 문자열 또는 사전과 같은 특정 값 유형에 연결된 함수입니다. "
"우리는 그것들을 메소드라고 부르기도 합니다.\n"
"\n"
"예를 들어, 배열에는 [code]array.append()[/code]와 같은 멤버 함수가 있습니"
"다.\n"
"\n"
"위에 표시된 것처럼 액세스 연산자([code].[/code])를 사용하여 배열에 대한 함수"
"만 호출하여 액세스할 수 있습니다."

#. Reference: member variable
#: course/glossary.csv:9
msgid "member variable"
msgstr "멤버 변수"

#. Reference: member variable
#: course/glossary.csv:9
msgid "member variables"
msgstr "멤버 변수들"

#. Reference: member variable
#: course/glossary.csv:9
msgid ""
"Member variables are variables attached to a specific value type, like a "
"vector's [code]x[/code] and [code]y[/code] sub-variables. We also call them "
"[i]properties[/i] or [i]fields[/i] of the vector.\n"
"\n"
"To access a member variable, you must first write the value's name followed "
"by the access operator ([code].[/code]). For example, [code]position.x[/"
"code]."
msgstr ""
"멤버 변수는 벡터의 [code]x[/code] 및 [code]y[/code] 하위 변수와 같은 특정 값 "
"유형에 연결된 변수입니다. 벡터의 [i]속성[/i] 또는 [i]필드[/i]라고도 합니다.\n"
"\n"
"멤버 변수에 액세스하려면 먼저 값의 이름과 액세스 연산자([code].[/code])를 차"
"례로 작성해야 합니다. 예: [code]position.x[/code]."

#. Reference: parameter
#: course/glossary.csv:12
msgid "parameter"
msgstr "매개변수"

#. Reference: parameter
#: course/glossary.csv:12
msgid "parameters"
msgstr "매개변수들"

#. Reference: parameter
#: course/glossary.csv:12
msgid ""
"A parameter is a variable you create as part of a function definition.\n"
"\n"
"It allows you to reuse the function more by having values that vary in the "
"function's body."
msgstr ""
"파라미터는 함수 정의의 일부로 생성하는 변수입니다.\n"
"\n"
"함수 본문에서 다양한 값을 가짐으로써 함수를 더 많이 재사용할 수 있습니다."

#. Reference: radian
#: course/glossary.csv:17
msgid "radian"
msgstr "라디안"

#. Reference: radian
#: course/glossary.csv:17
msgid "radians"
msgstr "라디안"

#. Reference: radian
#: course/glossary.csv:17
msgid ""
"A radian is a unit of measurement of angles based on the circle's "
"circumference.\n"
"\n"
"We tend to use degrees more in our daily lives, but in computer programming, "
"and especially in games, radians are common.\n"
"\n"
"An angle of [code]2 * PI[/code] radians corresponds to 360 degrees. And an "
"angle of [code]PI[/code] radians corresponds to 180 degrees."
msgstr ""
"라디안은 원의 둘레를 기준으로 한 각도 측정 단위입니다.\n"
"\n"
"우리는 일상 생활에서 도를 더 많이 사용하는 경향이 있지만 컴퓨터 프로그래밍, "
"특히 게임에서는 라디안이 일반적입니다.\n"
"\n"
"[code]2 * PI[/code] 라디안의 각도는 360도에 해당합니다. 그리고 [code]PI[/"
"code] 라디안의 각도는 180도에 해당합니다."

#. Reference: type
#: course/glossary.csv:20
msgid "type"
msgstr "유형"

#. Reference: type
#: course/glossary.csv:20
msgid "types"
msgstr "유형들"

#. Reference: type
#: course/glossary.csv:20
msgid ""
"In computer programming, a type is the class of a value. For example, whole "
"numbers like [code]3[/code], [code]11[/code], and [code]255462[/code] are "
"all of type [code]int[/code] (short for integer).\n"
"\n"
"The computer uses types to determine which operations are valid between two "
"values and when they're undefined."
msgstr ""
"컴퓨터 프로그래밍에서 타입은 값의 클래스입니다. 예를 들어 [code]3[/code], "
"[code]11[/code] 및 [code]255462[/code]와 같은 정수는 모두 [code]int[/code] 타"
"입입니다(정수 약어). .\n"
"\n"
"컴퓨터는 유형을 사용하여 두 값 간에 유효한 작업과 정의되지 않은 경우를 결정합"
"니다."

#. Reference: iteration
#: course/glossary.csv:23
msgid "iteration"
msgstr "반복"

#. Reference: iteration
#: course/glossary.csv:23
msgid "iterations"
msgstr "반복들"

#. Reference: iteration
#: course/glossary.csv:23
msgid ""
"In computer code, an iteration is one repetition of some process or code. We "
"typically use the term with loops, where one iteration is one run of the "
"loop's code.\n"
"\n"
"When talking of algorithms, an iteration can mean a full pass of the "
"algorithm on a data set."
msgstr ""
"컴퓨터 코드에서 반복은 일부 프로세스 또는 코드의 1회 반복입니다. 우리는 일반"
"적으로 루프와 함께 용어를 사용합니다. 여기서 한 번의 반복은 루프의 코드를 한 "
"번 실행하는 것입니다.\n"
"\n"
"알고리즘에 대해 이야기할 때 반복은 데이터 세트에 대한 알고리즘의 전체 패스를 "
"의미할 수 있습니다."

#. Reference: vector
#: course/glossary.csv:28
msgid "vector"
msgstr "벡터"

#. Reference: vector
#: course/glossary.csv:28
msgid "vectors"
msgstr "벡터들"

#. Reference: vector
#: course/glossary.csv:28
msgid ""
"In math, a vector is a list of numbers. In games, we often use 2D and 3D "
"vectors: respectively, lists of two and three numbers.\n"
"\n"
"We use that to represent a direction and magnitude or intensity in space. "
"For example, you can use a vector to represent the direction and speed at "
"which a character or a vehicle moves.\n"
"\n"
"Vectors can seem daunting at first because they are pretty abstract, but as "
"you will see, they'll simplify code tremendously."
msgstr ""
"수학에서 벡터는 숫자 목록입니다. 게임에서 우리는 종종 2D 및 3D 벡터를 사용합"
"니다. 각각 두 개와 세 개의 숫자 목록입니다.\n"
"\n"
"우리는 그것을 사용하여 공간의 방향과 크기 또는 강도를 나타냅니다. 예를 들어 "
"벡터를 사용하여 캐릭터나 차량이 이동하는 방향과 속도를 나타낼 수 있습니다.\n"
"\n"
"벡터는 매우 추상적이기 때문에 처음에는 위압적으로 보일 수 있지만, 보시다시피 "
"코드를 엄청나게 단순화할 것입니다."

#. Reference: argument
#: course/glossary.csv:37
msgid "argument"
msgstr "인수"

#. Reference: argument
#: course/glossary.csv:37
msgid "arguments"
msgstr "인수들"

#. Reference: argument
#: course/glossary.csv:37
#, fuzzy
msgid ""
"An argument is a value that you pass to a function when calling the "
"function. For example, in the call [code]rotate(0.5)[/code], the value "
"[code]0.5[/code] in the parentheses is an argument.\n"
"\n"
"A function can receive no arguments, one argument, or multiple arguments. "
"Arguments can be mandatory or optional.\n"
"\n"
"When a function takes multiple arguments, you separate the values with "
"commas, like in this function call: [code]jump(50, 100)[/code]\n"
"\n"
"When [i]calling[/i] a function, we name the values passed in parentheses "
"[i]arguments[/i].\n"
"\n"
"When writing a function definition, however, we talk about function "
"[i]parameters[/i]. In the following example, the names [code]x[/code] and "
"[code]y[/code] are [i]parameters[/i]."
msgstr ""
"인수는 함수를 호출할 때 함수에 전달하는 값입니다. 예를 들어 [code]rotate(0.5)"
"[/code] 호출에서 괄호 안의 값 [code]0.5[/code]는 인수입니다.\n"
"\n"
"함수는 인수가 없거나 하나 또는 여러 인수를 받을 수 있습니다. 인수는 필수 또"
"는 선택 사항일 수 있습니다.\n"
"\n"
"함수가 여러 인수를 사용하는 경우 다음 함수 호출과 같이 값을 쉼표로 구분합니"
"다. jump(50, 100)\n"
"\n"
"함수를 [i]호출[/i]할 때 괄호 안 [i]인수[/i]에 전달된 값의 이름을 지정합니"
"다.\n"
"\n"
"그러나 함수 정의를 작성할 때 함수 [i]매개변수[/i]에 대해 이야기합니다. 다음 "
"예에서 이름 [code]x[/code] 및 [code]y[/code]는 [i]매개변수[/i]입니다."

#. Reference: array
#: course/glossary.csv:44
msgid "array"
msgstr "배열"

#. Reference: array
#: course/glossary.csv:44
msgid "arrays"
msgstr "배열들"

#. Reference: array
#: course/glossary.csv:44
msgid ""
"An array is a list of values. In GDScript, arrays can contain [i]any[/i] "
"types of value.\n"
"\n"
"To create an array, you write comma-separated values in square brackets: "
"[code]var three_numbers = [1, 2, 3][/code]\n"
"\n"
"In games, we use arrays all the time to store lists of characters in a "
"party, lists of items in inventory, lists of spells the player unlocked, and "
"so on. They're everywhere.\n"
"\n"
"Arrays are a fundamental value type in computer programming. You'll find "
"arrays in pretty much any programming language."
msgstr ""
"배열은 값의 목록입니다. GDScript에서 배열은 [i]모든[/i] 유형의 값을 포함할 "
"수 있습니다.\n"
"\n"
"배열을 생성하려면 대괄호 안에 쉼표로 구분된 값을 작성합니다. [code]var "
"three_numbers = [1, 2, 3][/code]\n"
"\n"
"게임에서 우리는 항상 배열을 사용하여 파티의 캐릭터 목록, 인벤토리의 항목 목"
"록, 플레이어가 잠금 해제한 주문 목록 등을 저장합니다. 그들은 어디에나 있습니"
"다.\n"
"\n"
"배열은 컴퓨터 프로그래밍의 기본 값 유형입니다. 거의 모든 프로그래밍 언어에서 "
"배열을 찾을 수 있습니다."

#. Reference: assign
#: course/glossary.csv:45
msgid "assign"
msgstr "할당"

#. Reference: assign
#: course/glossary.csv:45
msgid ""
"Assigning a value to a variable means that you store a value inside the "
"variable. You do this with the equal sign ([code]=[/code])."
msgstr ""
"변수에 값을 할당한다는 것은 변수 안에 값을 저장한다는 의미입니다. 등호"
"([code]=[/code])를 사용하여 이 작업을 수행합니다."

#. Reference: dictionary
#: course/glossary.csv:52
msgid "dictionary"
msgstr "사전형"

#. Reference: dictionary
#: course/glossary.csv:52
msgid "dictionaries"
msgstr "사전형들"

#. Reference: dictionary
#: course/glossary.csv:52
msgid ""
"A dictionary is a data structure that maps values with key-value pairs. When "
"you give the dictionary a key, it finds and gives you back the corresponding "
"value.\n"
"\n"
"In GDScript, keys can be many things. We often use text strings or numbers, "
"but you're not limited to that. A [code]Vector2[/code] can also be a valid "
"key, which is handy to map a grid cell to a unit or an item in a grid-based "
"game.\n"
"\n"
"You will often use dictionaries to associate bits of data in your games. For "
"example, we could use them to associate an equipment's name with its weapon "
"stats in a database.\n"
"\n"
"Like arrays, they are a fundamental data type that you will see in many "
"programming languages and use a lot."
msgstr ""
"사전형은 값을 키-값 쌍으로 매핑하는 데이터 구조입니다. 사전형에 키를 제공하"
"면 해당 값을 찾아 다시 제공합니다.\n"
"\n"
"GDScript에서 키는 여러 가지가 될 수 있습니다. 우리는 종종 텍스트 문자열이나 "
"숫자를 사용하지만 이에 국한되지 않습니다. [code]Vector2[/code]는 그리드 셀을 "
"그리드 기반 게임의 유닛이나 항목에 매핑하는 데 편리한 유효한 키일 수도 있습니"
"다.\n"
"\n"
"게임에서 데이터 비트를 연결하기 위해 사전을 자주 사용합니다. 예를 들어 장비 "
"이름을 데이터베이스의 무기 통계와 연결하는 데 사용할 수 있습니다.\n"
"\n"
"배열과 마찬가지로 많은 프로그래밍 언어에서 볼 수 있고 많이 사용하는 기본 데이"
"터 유형입니다."

#. Reference: for loop
#: course/glossary.csv:59
msgid "for loop"
msgstr "for loop 반복"

#. Reference: for loop
#: course/glossary.csv:59
msgid "for loops"
msgstr "for loops 반복"

#. Reference: for loop
#: course/glossary.csv:59
msgid ""
"A for loop instructs the computer to repeat a set of instructions once for "
"each value in an array.\n"
"\n"
"In each loop iteration, the compiler extracts one value from the array and "
"gives you access to it in the loop's body.\n"
"\n"
"For loops run code a limited amount of times: one per value in the array. It "
"is different from while loops that keep repeating code until a condition is "
"met.\n"
"\n"
"We recommend favoring for loops when you can. They're safer and easier to "
"use than while loops."
msgstr ""
"for loop는 배열의 각 값에 대해 한 번씩 일련의 명령을 반복하도록 컴퓨터에 지시"
"합니다.\n"
"\n"
"각 loop반복에서 컴파일러는 배열에서 하나의 값을 추출하고 loop 본문에서 해당 "
"값에 액세스할 수 있도록 합니다.\n"
"\n"
"For loop는 제한된 횟수만큼 코드를 실행합니다. 배열의 값당 하나씩. 조건이 충족"
"될 때까지 코드를 계속 반복하는 while loop와 다릅니다.\n"
"\n"
"가능하면 for loop를 사용하는 것이 좋습니다. while loop보다 더 안전하고 사용하"
"기 쉽습니다."

#. Reference: function
#: course/glossary.csv:64
msgid "function"
msgstr "함수"

#. Reference: function
#: course/glossary.csv:64
msgid "functions"
msgstr "함수들"

#. Reference: function
#: course/glossary.csv:64
msgid ""
"A function is a group of code instructions you give a name. When you define "
"a function, you can call it any time to run all the instructions it "
"contains.\n"
"\n"
"You can modify a function's behavior with parameters. Parameters are "
"variable names that you write in the function definition. You can then use "
"them in the function's body to make your code adapt to different cases.\n"
"\n"
"Also, functions can optionally return a value to the code calling it."
msgstr ""
"함수는 이름을 지정하는 코드 명령 그룹입니다. 함수를 정의할 때 함수에 포함된 "
"모든 명령을 실행하기 위해 언제든지 호출할 수 있습니다.\n"
"\n"
"매개변수를 사용하여 함수의 동작을 수정할 수 있습니다. 매개변수는 함수 정의에 "
"작성하는 변수 이름입니다. 그런 다음 함수의 본문에서 이를 사용하여 코드를 다양"
"한 경우에 적용할 수 있습니다.\n"
"\n"
"또한 함수는 선택적으로 이를 호출하는 코드에 값을 반환할 수 있습니다."

#. Reference: increment
#: course/glossary.csv:65
msgid "increment"
msgstr "증가"

#. Reference: increment
#: course/glossary.csv:65
msgid "increments"
msgstr "증분"

#. Reference: increment
#: course/glossary.csv:65
msgid "An increment is the amount by which a value changes in your code."
msgstr "증분은 코드에서 값이 변경되는 양입니다."

#. Reference: instruction
#: course/glossary.csv:68
msgid "instruction"
msgstr "지침"

#. Reference: instruction
#: course/glossary.csv:68
msgid "instructions"
msgstr "지침"

#. Reference: instruction
#: course/glossary.csv:68
msgid ""
"In computer programming, instructions are a single operation the computer "
"recognizes and can execute.\n"
"\n"
"For example, a function call, an addition, or assigning a value to a "
"variable."
msgstr ""
"컴퓨터 프로그래밍에서 명령어는 컴퓨터가 인식하고 실행할 수 있는 단일 작업입니"
"다.\n"
"\n"
"예를 들어, 함수 호출, 추가 또는 변수에 값 할당."

#. Reference: variable
#: course/glossary.csv:77
msgid "variable"
msgstr "변수"

#. Reference: variable
#: course/glossary.csv:77
msgid "variables"
msgstr "변수들"

#. Reference: variable
#: course/glossary.csv:77
msgid ""
"Variables are a tool to give a name to values you want to store in your code "
"and change over time.\n"
"\n"
"For example, a character's health: when the character takes a hit, you want "
"it to go down. When healing, you want the health to go back up.\n"
"\n"
"You can create a variable named [code]health[/code] to represent the "
"health.\n"
"\n"
"Then, every time you write the keyword [code]health[/code] in your code, the "
"computer will fetch the corresponding value in its memory for you.\n"
"\n"
"Variables work a bit like product labels in a supermarket. They are names "
"that you attach to some value. Any time, you can take the label and stick it "
"onto a new product or, in that case, a new value."
msgstr ""
"변수는 코드에 저장하고 시간이 지남에 따라 변경하려는 값에 이름을 지정하는 도"
"구입니다.\n"
"\n"
"예를 들어, 캐릭터의 건강: 캐릭터가 명중을 당했을 때, 당신은 그것이 떨어지기"
"를 원합니다. 치유되면 건강이 회복되기를 원합니다.\n"
"\n"
"상태를 나타내는 [code]health[/code]라는 변수를 생성할 수 있습니다.\n"
"\n"
"그러면 코드에 키워드 [code]health[/code]를 작성할 때마다 컴퓨터가 메모리에서 "
"해당 값을 가져옵니다.\n"
"\n"
"변수는 슈퍼마켓의 제품 라벨처럼 작동합니다. 그것들은 당신이 어떤 가치에 붙이"
"는 이름입니다. 언제든지 라벨을 가져와 새 제품이나 새 제품에 붙일 수 있습니다."

#. Reference: while loop
#: course/glossary.csv:84
msgid "while loop"
msgstr "while loop 반복"

#. Reference: while loop
#: course/glossary.csv:84
msgid "while loops"
msgstr "while loops 반복"

#. Reference: while loop
#: course/glossary.csv:84
msgid ""
"A while loop instructs the computer to keep running code based on a "
"condition. While the condition is true, the loop keeps running.\n"
"\n"
"When coding while loops, you must be careful: they will keep running "
"infinitely and freeze your game if you get the condition wrong.\n"
"\n"
"That's why we recommend using the safer for loop whenever you can.\n"
"\n"
"However, there are still essential cases in which we use while loops, like "
"processing files, processing computer code, or for powerful algorithms."
msgstr ""
"while loop는 조건에 따라 코드를 계속 실행하도록 컴퓨터에 지시합니다. 조건이 "
"true인 동안 loop는 계속 실행됩니다.\n"
"\n"
"while loop를 코딩할 때 주의해야 합니다. 조건이 잘못되면 무한히 계속 실행되고 "
"게임이 중지됩니다.\n"
"\n"
"그렇기 때문에 가능한 한 더 안전한 for loop를 사용하는 것이 좋습니다.\n"
"\n"
"그러나 파일 처리, 컴퓨터 코드 처리 또는 강력한 알고리즘과 같이 while loop를 "
"사용하는 필수 경우가 여전히 있습니다."

#. Reference: body
#: course/glossary.csv:85
msgid "body"
msgstr "바디"

#. Reference: body
#: course/glossary.csv:85
msgid ""
"We talk about a loop or a function's body to refer to the lines of code that "
"are part of the loop or function."
msgstr ""
"우리는 루프나 함수의 일부인 코드 라인을 참조하기 위해 루프나 함수의 본문에 대"
"해 이야기합니다."

#. Reference: return
#: course/glossary.csv:88
msgid "return"
msgstr "리턴"

#. Reference: return
#: course/glossary.csv:88
msgid ""
"Returning a value is the process of sending a value to the place where you "
"call a function.\n"
"\n"
"It happens when a function uses the [code]return[/code] keyword followed by "
"a value, for example: [code]return -1[/code]."
msgstr ""
"값을 반환하는 것은 함수를 호출한 곳으로 값을 보내는 과정입니다.\n"
"\n"
"함수가 [code]return[/code] 키워드 뒤에 값을 사용할 때 발생합니다(예: "
"[code]return -1[/code])."

#. Reference: library
#: course/glossary.csv:89
msgid "library"
msgstr "라이브러리"

#. Reference: library
#: course/glossary.csv:89
msgid "libraries"
msgstr "라이브러리즈"

#. Reference: library
#: course/glossary.csv:89
msgid ""
"A collection of valuable and reusable code bundled together by other "
"programmers to save you time. All programmers use code libraries."
msgstr ""
"시간을 절약하기 위해 다른 프로그래머가 함께 묶은 가치 있고 재사용 가능한 코"
"드 모음입니다. 모든 프로그래머는 코드 라이브러리를 사용합니다."

#. Reference: sprite
#: course/glossary.csv:90
msgid "sprite"
msgstr "스프라이트"

#. Reference: sprite
#: course/glossary.csv:90
msgid "sprites"
msgstr "스프라이츠"

#. Reference: sprite
#: course/glossary.csv:90
msgid ""
"In computer graphics, a sprite is an image you display on the screen. We "
"generally use this word to talk about moving images, like a character, a "
"monster, or an item falling on the ground."
msgstr ""
"컴퓨터 그래픽에서 스프라이트는 화면에 표시하는 이미지입니다. 우리는 일반적으"
"로 이 단어를 캐릭터, 괴물 또는 땅에 떨어지는 물건과 같은 움직이는 이미지에 대"
"해 이야기할 때 사용합니다."
